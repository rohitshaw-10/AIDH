{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asits\\\\OneDrive\\\\Desktop\\\\integrate\\\\frontend\\\\src\\\\pages\\\\Additional.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { Container, Typography, FormControl, InputLabel, Select, MenuItem, Box, TextField, Button, Alert } from '@mui/material';\n\n// const DiabetesForm = ({ onPredict }) => {\n//   const fields = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age'];\n//   const [values, setValues] = useState({});\n\n//   const handleChange = (field, value) => {\n//     setValues({ ...values, [field]: value });\n//   };\n\n//   const handleSubmit = () => {\n//     if (fields.every(field => values[field])) {\n//       onPredict(Object.values(values));\n//     } else {\n//       alert(\"Please fill all the fields\");\n//     }\n//   };\n\n//   return (\n//     <Box mt={2}>\n//       {fields.map(label => (\n//         <TextField\n//           key={label}\n//           label={label}\n//           variant=\"outlined\"\n//           fullWidth\n//           margin=\"normal\"\n//           value={values[label] || ''}\n//           onChange={(e) => handleChange(label, e.target.value)}\n//           required\n//           helperText={`Enter ${label}`}\n//         />\n//       ))}\n//       <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Predict</Button>\n//     </Box>\n//   );\n// };\n\n// const HeartDiseaseForm = ({ onPredict }) => {\n//   const fields = [\n//     { label: 'Age', helper: 'Enter age in years' },\n//     { label: 'Sex', helper: '1 = male; 0 = female' },\n//     { label: 'CP', helper: 'Chest pain type (0–3)' },\n//     { label: 'Trestbps', helper: 'Resting blood pressure (in mm Hg)' },\n//     { label: 'Chol', helper: 'Serum cholesterol in mg/dL' },\n//     { label: 'Fbs', helper: 'Fasting blood sugar > 120 mg/dL (1 = true; 0 = false)' },\n//     { label: 'Restecg', helper: 'Resting ECG results (0–2)' },\n//     { label: 'Thalach', helper: 'Maximum heart rate achieved' },\n//     { label: 'Exang', helper: 'Exercise-induced angina (1 = yes; 0 = no)' },\n//     { label: 'Oldpeak', helper: 'ST depression induced by exercise' },\n//     { label: 'Slope', helper: 'Slope of the peak exercise ST segment (0–2)' },\n//     { label: 'Ca', helper: 'Number of major vessels (0–3)' },\n//     { label: 'Thal', helper: 'Thalassemia (3 = normal; 6 = fixed defect; 7 = reversible defect)' },\n//   ];\n//   const [values, setValues] = useState({});\n\n//   const handleChange = (field, value) => {\n//     setValues({ ...values, [field]: value });\n//   };\n\n//   const handleSubmit = () => {\n//     if (fields.every(({ label }) => values[label])) {\n//       onPredict(Object.values(values));\n//     } else {\n//       alert(\"Please fill all the fields\");\n//     }\n//   };\n\n//   return (\n//     <Box mt={2}>\n//       {fields.map(({ label, helper }) => (\n//         <TextField\n//           key={label}\n//           label={label}\n//           variant=\"outlined\"\n//           fullWidth\n//           margin=\"normal\"\n//           value={values[label] || ''}\n//           onChange={(e) => handleChange(label, e.target.value)}\n//           required\n//           helperText={helper}\n//         />\n//       ))}\n//       <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Predict</Button>\n//     </Box>\n//   );\n// };\n\n// const ParkinsonsDiseaseForm = ({ onPredict }) => {\n//   const fields = [\n//     'MDVP:Fo(Hz)', 'MDVP:Fhi(Hz)', 'MDVP:Flo(Hz)', 'MDVP:Jitter(%)', 'MDVP:Jitter(Abs)',\n//     'MDVP:RAP', 'MDVP:PPQ', 'Jitter:DDP', 'MDVP:Shimmer', 'MDVP:Shimmer(dB)', 'Shimmer:APQ3',\n//     'Shimmer:APQ5', 'MDVP:APQ', 'Shimmer:DDA', 'NHR', 'HNR', 'RPDE', 'DFA', 'spread1', \n//     'spread2', 'D2', 'PPE'\n//   ];\n//   const [values, setValues] = useState({});\n\n//   const handleChange = (field, value) => {\n//     setValues({ ...values, [field]: value });\n//   };\n\n//   const handleSubmit = () => {\n//     if (fields.every(field => values[field])) {\n//       onPredict(Object.values(values));\n//     } else {\n//       alert(\"Please fill all the fields\");\n//     }\n//   };\n\n//   return (\n//     <Box mt={2}>\n//       {fields.map(label => (\n//         <TextField\n//           key={label}\n//           label={label}\n//           variant=\"outlined\"\n//           fullWidth\n//           margin=\"normal\"\n//           value={values[label] || ''}\n//           onChange={(e) => handleChange(label, e.target.value)}\n//           required\n//           helperText={`Enter ${label}`}\n//         />\n//       ))}\n//       <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Predict</Button>\n//     </Box>\n//   );\n// };\n\n// const Additional = () => {\n//   const [disease, setDisease] = useState('');\n//   const [prediction, setPrediction] = useState(null);\n\n//   const handleChange = (event) => {\n//     setDisease(event.target.value);\n//     setPrediction(null); // Reset prediction on disease change\n//   };\n\n//   const handlePredict = (data) => {\n//     console.log(\"Prediction data:\", data);\n//     setPrediction(data);\n//   };\n\n//   return (\n//     <Container maxWidth=\"sm\" style={{ marginTop: '6rem', textAlign: 'center' }}>\n//       <Typography variant=\"h4\" gutterBottom>\n//         Please Select What Disease You Want to Check\n//       </Typography>\n//       <Box mt={2} p={2} style={{ border: '1px solid #ccc', borderRadius: '8px' }}>\n//         <FormControl fullWidth variant=\"outlined\" style={{ marginBottom: '1rem' }}>\n//           <InputLabel id=\"disease-select-label\">Select Disease</InputLabel>\n//           <Select\n//             labelId=\"disease-select-label\"\n//             value={disease}\n//             onChange={handleChange}\n//             label=\"Select Disease\"\n//           >\n//             <MenuItem value=\"Diabetes\">Diabetes</MenuItem>\n//             <MenuItem value=\"Heart Disease\">Heart Disease</MenuItem>\n//             <MenuItem value=\"Parkinsons Disease\">Parkinson's Disease</MenuItem>\n//           </Select>\n//         </FormControl>\n\n//         {/* Render form based on disease selection */}\n//         {disease === 'Diabetes' && <DiabetesForm onPredict={handlePredict} />}\n//         {disease === 'Heart Disease' && <HeartDiseaseForm onPredict={handlePredict} />}\n//         {disease === 'Parkinsons Disease' && <ParkinsonsDiseaseForm onPredict={handlePredict} />}\n\n//         {prediction && (\n//           <Alert severity=\"success\" style={{ marginTop: '1rem' }}>\n//             Prediction data: {JSON.stringify(prediction)}\n//           </Alert>\n//         )}\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default Additional;\n\nimport React, { useState } from 'react';\nimport { Container, Typography, FormControl, InputLabel, Select, MenuItem, Box, TextField, Button, Alert } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiabetesForm = ({\n  onPredict\n}) => {\n  _s();\n  const fields = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age'];\n  const [values, setValues] = useState({});\n  const [errorFields, setErrorFields] = useState([]);\n  const handleChange = (field, value) => {\n    setValues({\n      ...values,\n      [field]: value\n    });\n    setErrorFields(errorFields.filter(error => error !== field)); // Clear error when the field is filled\n  };\n  const handleSubmit = () => {\n    const missingFields = fields.filter(field => !values[field]);\n    if (missingFields.length > 0) {\n      setErrorFields(missingFields);\n      document.getElementsByName(missingFields[0])[0].focus(); // Focus on the first missing field\n    } else {\n      onPredict(Object.values(values));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    mt: 2,\n    children: [fields.map(label => /*#__PURE__*/_jsxDEV(TextField, {\n      name: label,\n      label: label,\n      variant: \"outlined\",\n      fullWidth: true,\n      margin: \"normal\",\n      value: values[label] || '',\n      onChange: e => handleChange(label, e.target.value),\n      required: true,\n      error: errorFields.includes(label),\n      helperText: errorFields.includes(label) ? `Please enter ${label}` : `Enter ${label}`\n    }, label, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleSubmit,\n      children: \"Predict\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n\n// Similar setup for HeartDiseaseForm and ParkinsonsDiseaseForm\n// ...\n_s(DiabetesForm, \"07XnMsApHlTJk9U1KKylHtDG+aI=\");\n_c = DiabetesForm;\nconst Additional = () => {\n  _s2();\n  const [disease, setDisease] = useState('');\n  const [prediction, setPrediction] = useState(null);\n  const handleChange = event => {\n    setDisease(event.target.value);\n    setPrediction(null); // Reset prediction on disease change\n  };\n  const handlePredict = data => {\n    console.log(\"Prediction data:\", data);\n    setPrediction(data);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    style: {\n      marginTop: '6rem',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Please Select What Disease You Want to Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 2,\n      p: 2,\n      style: {\n        border: '1px solid #ccc',\n        borderRadius: '8px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        variant: \"outlined\",\n        style: {\n          marginBottom: '1rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          id: \"disease-select-label\",\n          children: \"Select Disease\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: \"disease-select-label\",\n          value: disease,\n          onChange: handleChange,\n          label: \"Select Disease\",\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Diabetes\",\n            children: \"Diabetes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Heart Disease\",\n            children: \"Heart Disease\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Parkinsons Disease\",\n            children: \"Parkinson's Disease\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), disease === 'Diabetes' && /*#__PURE__*/_jsxDEV(DiabetesForm, {\n        onPredict: handlePredict\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 36\n      }, this), prediction && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        style: {\n          marginTop: '1rem'\n        },\n        children: [\"Prediction data: \", JSON.stringify(prediction)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n};\n_s2(Additional, \"6iSfi9dFZlgQhmp4SRXhZNTw9aU=\");\n_c2 = Additional;\nexport default Additional;\nvar _c, _c2;\n$RefreshReg$(_c, \"DiabetesForm\");\n$RefreshReg$(_c2, \"Additional\");","map":{"version":3,"names":["React","useState","Container","Typography","FormControl","InputLabel","Select","MenuItem","Box","TextField","Button","Alert","jsxDEV","_jsxDEV","DiabetesForm","onPredict","_s","fields","values","setValues","errorFields","setErrorFields","handleChange","field","value","filter","error","handleSubmit","missingFields","length","document","getElementsByName","focus","Object","mt","children","map","label","name","variant","fullWidth","margin","onChange","e","target","required","includes","helperText","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","_c","Additional","_s2","disease","setDisease","prediction","setPrediction","event","handlePredict","data","console","log","maxWidth","style","marginTop","textAlign","gutterBottom","p","border","borderRadius","marginBottom","id","labelId","severity","JSON","stringify","_c2","$RefreshReg$"],"sources":["C:/Users/asits/OneDrive/Desktop/integrate/frontend/src/pages/Additional.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { Container, Typography, FormControl, InputLabel, Select, MenuItem, Box, TextField, Button, Alert } from '@mui/material';\r\n\r\n// const DiabetesForm = ({ onPredict }) => {\r\n//   const fields = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age'];\r\n//   const [values, setValues] = useState({});\r\n\r\n//   const handleChange = (field, value) => {\r\n//     setValues({ ...values, [field]: value });\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (fields.every(field => values[field])) {\r\n//       onPredict(Object.values(values));\r\n//     } else {\r\n//       alert(\"Please fill all the fields\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Box mt={2}>\r\n//       {fields.map(label => (\r\n//         <TextField\r\n//           key={label}\r\n//           label={label}\r\n//           variant=\"outlined\"\r\n//           fullWidth\r\n//           margin=\"normal\"\r\n//           value={values[label] || ''}\r\n//           onChange={(e) => handleChange(label, e.target.value)}\r\n//           required\r\n//           helperText={`Enter ${label}`}\r\n//         />\r\n//       ))}\r\n//       <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Predict</Button>\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n// const HeartDiseaseForm = ({ onPredict }) => {\r\n//   const fields = [\r\n//     { label: 'Age', helper: 'Enter age in years' },\r\n//     { label: 'Sex', helper: '1 = male; 0 = female' },\r\n//     { label: 'CP', helper: 'Chest pain type (0–3)' },\r\n//     { label: 'Trestbps', helper: 'Resting blood pressure (in mm Hg)' },\r\n//     { label: 'Chol', helper: 'Serum cholesterol in mg/dL' },\r\n//     { label: 'Fbs', helper: 'Fasting blood sugar > 120 mg/dL (1 = true; 0 = false)' },\r\n//     { label: 'Restecg', helper: 'Resting ECG results (0–2)' },\r\n//     { label: 'Thalach', helper: 'Maximum heart rate achieved' },\r\n//     { label: 'Exang', helper: 'Exercise-induced angina (1 = yes; 0 = no)' },\r\n//     { label: 'Oldpeak', helper: 'ST depression induced by exercise' },\r\n//     { label: 'Slope', helper: 'Slope of the peak exercise ST segment (0–2)' },\r\n//     { label: 'Ca', helper: 'Number of major vessels (0–3)' },\r\n//     { label: 'Thal', helper: 'Thalassemia (3 = normal; 6 = fixed defect; 7 = reversible defect)' },\r\n//   ];\r\n//   const [values, setValues] = useState({});\r\n\r\n//   const handleChange = (field, value) => {\r\n//     setValues({ ...values, [field]: value });\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (fields.every(({ label }) => values[label])) {\r\n//       onPredict(Object.values(values));\r\n//     } else {\r\n//       alert(\"Please fill all the fields\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Box mt={2}>\r\n//       {fields.map(({ label, helper }) => (\r\n//         <TextField\r\n//           key={label}\r\n//           label={label}\r\n//           variant=\"outlined\"\r\n//           fullWidth\r\n//           margin=\"normal\"\r\n//           value={values[label] || ''}\r\n//           onChange={(e) => handleChange(label, e.target.value)}\r\n//           required\r\n//           helperText={helper}\r\n//         />\r\n//       ))}\r\n//       <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Predict</Button>\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n// const ParkinsonsDiseaseForm = ({ onPredict }) => {\r\n//   const fields = [\r\n//     'MDVP:Fo(Hz)', 'MDVP:Fhi(Hz)', 'MDVP:Flo(Hz)', 'MDVP:Jitter(%)', 'MDVP:Jitter(Abs)',\r\n//     'MDVP:RAP', 'MDVP:PPQ', 'Jitter:DDP', 'MDVP:Shimmer', 'MDVP:Shimmer(dB)', 'Shimmer:APQ3',\r\n//     'Shimmer:APQ5', 'MDVP:APQ', 'Shimmer:DDA', 'NHR', 'HNR', 'RPDE', 'DFA', 'spread1', \r\n//     'spread2', 'D2', 'PPE'\r\n//   ];\r\n//   const [values, setValues] = useState({});\r\n\r\n//   const handleChange = (field, value) => {\r\n//     setValues({ ...values, [field]: value });\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (fields.every(field => values[field])) {\r\n//       onPredict(Object.values(values));\r\n//     } else {\r\n//       alert(\"Please fill all the fields\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Box mt={2}>\r\n//       {fields.map(label => (\r\n//         <TextField\r\n//           key={label}\r\n//           label={label}\r\n//           variant=\"outlined\"\r\n//           fullWidth\r\n//           margin=\"normal\"\r\n//           value={values[label] || ''}\r\n//           onChange={(e) => handleChange(label, e.target.value)}\r\n//           required\r\n//           helperText={`Enter ${label}`}\r\n//         />\r\n//       ))}\r\n//       <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Predict</Button>\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n// const Additional = () => {\r\n//   const [disease, setDisease] = useState('');\r\n//   const [prediction, setPrediction] = useState(null);\r\n\r\n//   const handleChange = (event) => {\r\n//     setDisease(event.target.value);\r\n//     setPrediction(null); // Reset prediction on disease change\r\n//   };\r\n\r\n//   const handlePredict = (data) => {\r\n//     console.log(\"Prediction data:\", data);\r\n//     setPrediction(data);\r\n//   };\r\n\r\n//   return (\r\n//     <Container maxWidth=\"sm\" style={{ marginTop: '6rem', textAlign: 'center' }}>\r\n//       <Typography variant=\"h4\" gutterBottom>\r\n//         Please Select What Disease You Want to Check\r\n//       </Typography>\r\n//       <Box mt={2} p={2} style={{ border: '1px solid #ccc', borderRadius: '8px' }}>\r\n//         <FormControl fullWidth variant=\"outlined\" style={{ marginBottom: '1rem' }}>\r\n//           <InputLabel id=\"disease-select-label\">Select Disease</InputLabel>\r\n//           <Select\r\n//             labelId=\"disease-select-label\"\r\n//             value={disease}\r\n//             onChange={handleChange}\r\n//             label=\"Select Disease\"\r\n//           >\r\n//             <MenuItem value=\"Diabetes\">Diabetes</MenuItem>\r\n//             <MenuItem value=\"Heart Disease\">Heart Disease</MenuItem>\r\n//             <MenuItem value=\"Parkinsons Disease\">Parkinson's Disease</MenuItem>\r\n//           </Select>\r\n//         </FormControl>\r\n\r\n//         {/* Render form based on disease selection */}\r\n//         {disease === 'Diabetes' && <DiabetesForm onPredict={handlePredict} />}\r\n//         {disease === 'Heart Disease' && <HeartDiseaseForm onPredict={handlePredict} />}\r\n//         {disease === 'Parkinsons Disease' && <ParkinsonsDiseaseForm onPredict={handlePredict} />}\r\n\r\n//         {prediction && (\r\n//           <Alert severity=\"success\" style={{ marginTop: '1rem' }}>\r\n//             Prediction data: {JSON.stringify(prediction)}\r\n//           </Alert>\r\n//         )}\r\n//       </Box>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Additional;\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport { Container, Typography, FormControl, InputLabel, Select, MenuItem, Box, TextField, Button, Alert } from '@mui/material';\r\n\r\nconst DiabetesForm = ({ onPredict }) => {\r\n  const fields = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age'];\r\n  const [values, setValues] = useState({});\r\n  const [errorFields, setErrorFields] = useState([]);\r\n\r\n  const handleChange = (field, value) => {\r\n    setValues({ ...values, [field]: value });\r\n    setErrorFields(errorFields.filter(error => error !== field)); // Clear error when the field is filled\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const missingFields = fields.filter(field => !values[field]);\r\n    if (missingFields.length > 0) {\r\n      setErrorFields(missingFields);\r\n      document.getElementsByName(missingFields[0])[0].focus(); // Focus on the first missing field\r\n    } else {\r\n      onPredict(Object.values(values));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box mt={2}>\r\n      {fields.map(label => (\r\n        <TextField\r\n          key={label}\r\n          name={label}\r\n          label={label}\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          margin=\"normal\"\r\n          value={values[label] || ''}\r\n          onChange={(e) => handleChange(label, e.target.value)}\r\n          required\r\n          error={errorFields.includes(label)}\r\n          helperText={errorFields.includes(label) ? `Please enter ${label}` : `Enter ${label}`}\r\n        />\r\n      ))}\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Predict</Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\n// Similar setup for HeartDiseaseForm and ParkinsonsDiseaseForm\r\n// ...\r\n\r\nconst Additional = () => {\r\n  const [disease, setDisease] = useState('');\r\n  const [prediction, setPrediction] = useState(null);\r\n\r\n  const handleChange = (event) => {\r\n    setDisease(event.target.value);\r\n    setPrediction(null); // Reset prediction on disease change\r\n  };\r\n\r\n  const handlePredict = (data) => {\r\n    console.log(\"Prediction data:\", data);\r\n    setPrediction(data);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" style={{ marginTop: '6rem', textAlign: 'center' }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Please Select What Disease You Want to Check\r\n      </Typography>\r\n      <Box mt={2} p={2} style={{ border: '1px solid #ccc', borderRadius: '8px' }}>\r\n        <FormControl fullWidth variant=\"outlined\" style={{ marginBottom: '1rem' }}>\r\n          <InputLabel id=\"disease-select-label\">Select Disease</InputLabel>\r\n          <Select\r\n            labelId=\"disease-select-label\"\r\n            value={disease}\r\n            onChange={handleChange}\r\n            label=\"Select Disease\"\r\n          >\r\n            <MenuItem value=\"Diabetes\">Diabetes</MenuItem>\r\n            <MenuItem value=\"Heart Disease\">Heart Disease</MenuItem>\r\n            <MenuItem value=\"Parkinsons Disease\">Parkinson's Disease</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n\r\n        {/* Render form based on disease selection */}\r\n        {disease === 'Diabetes' && <DiabetesForm onPredict={handlePredict} />}\r\n        {/* Repeat for HeartDiseaseForm and ParkinsonsDiseaseForm */}\r\n\r\n        {prediction && (\r\n          <Alert severity=\"success\" style={{ marginTop: '1rem' }}>\r\n            Prediction data: {JSON.stringify(prediction)}\r\n          </Alert>\r\n        )}\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Additional;\r\n\r\n"],"mappings":";;;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,EAAEC,UAAU,EAAEC,WAAW,EAAEC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhI,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAMC,MAAM,GAAG,CAAC,aAAa,EAAE,SAAS,EAAE,eAAe,EAAE,eAAe,EAAE,SAAS,EAAE,KAAK,EAAE,0BAA0B,EAAE,KAAK,CAAC;EAChI,MAAM,CA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}