{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asits\\\\OneDrive\\\\Desktop\\\\integrate\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Widget, addResponseMessage, deleteMessages } from 'react-chat-widget';\n// import 'react-chat-widget/lib/styles.css';\n// import avatar from '../assets/chatbot-avatar.png';\n// import { useUser } from '../pages/UserContext'; // Import UserContext for logout handling\n\n// const Chatbot = () => {\n//   const { isLoggedIn } = useUser(); // Check if the user is logged in\n//   const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n//   // Function to handle new user messages\n//   const handleNewUserMessage = (message) => {\n//     console.log(`New message incoming: ${message}`);\n//     // Send the message to the backend\n//     axios\n//       .get('http://localhost:5000/get', {\n//         params: { msg: message },\n//         withCredentials: true, // Ensure cookies (sessions) are included\n//       })\n//       .then((response) => {\n//         const botMessage = response.data;\n//         console.log(\"Bot response: \", botMessage);\n//         renderBotResponse(botMessage);\n//       })\n//       .catch((error) => {\n//         console.error('Error getting response from the bot:', error);\n//         addResponseMessage('Sorry, something went wrong.');\n//       });\n//   };\n\n//   // Function to render bot responses with HTML\n//   const renderBotResponse = (message) => {\n//     const tempDiv = document.createElement('div');\n//     tempDiv.innerHTML = message;\n//     const cleanMessage = tempDiv.innerText || message;\n//     addResponseMessage(cleanMessage);\n//   };\n\n//   // Clear messages when the user logs out or when the page reloads\n//   useEffect(() => {\n//     if (!isLoggedIn) {\n//       console.log('User logged out. Clearing chat messages...');\n//       deleteMessages(); // Clear the chat messages on logout\n//       setIsFirstMessage(true); // Reset the first message state for the next user\n//     }\n//   }, [isLoggedIn]); // Runs every time `isLoggedIn` changes\n\n//   // Render initial bot messages when the user is logged in\n//   useEffect(() => {\n//     if (isFirstMessage && isLoggedIn) {\n//       console.log('Setting initial messages for logged-in user...');\n//       addResponseMessage(\"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\");\n//       addResponseMessage(\"To start, we need to ask some basic questions. Type 'OK' to continue.\");\n//       setIsFirstMessage(false);\n//     }\n//   }, [isFirstMessage, isLoggedIn]); // Run when `isFirstMessage` or `isLoggedIn` changes\n\n//   return (\n//     <div className=\"chat-container\">\n//       <Widget\n//         handleNewUserMessage={handleNewUserMessage}\n//         profileAvatar={avatar}\n//         title=\"AI Healthcare Assistant\"\n//         subtitle=\"How can I help you today?\"\n//       />\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Widget, addResponseMessage } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport avatar from '../assets/chatbot-avatar.png';\nimport { useUser } from '../pages/UserContext'; // Import UserContext for logout handling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const {\n    isLoggedIn\n  } = useUser(); // Check if the user is logged in\n  const [isFirstMessage, setIsFirstMessage] = useState(true);\n  const [messages, setMessages] = useState([]); // State to store chat messages\n\n  // Function to handle new user messages\n  const handleNewUserMessage = message => {\n    console.log(`New message incoming: ${message}`);\n    // Send the message to the backend\n    axios.get('http://localhost:5000/get', {\n      params: {\n        msg: message\n      },\n      withCredentials: true // Ensure cookies (sessions) are included\n    }).then(response => {\n      const botMessage = response.data;\n      console.log(\"Bot response: \", botMessage);\n      renderBotResponse(botMessage);\n    }).catch(error => {\n      console.error('Error getting response from the bot:', error);\n      addResponseMessage('Sorry, something went wrong.');\n    });\n  };\n\n  // Function to render bot responses with HTML\n  const renderBotResponse = message => {\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = message;\n    const cleanMessage = tempDiv.innerText || message;\n    setMessages(prevMessages => [...prevMessages, cleanMessage]); // Add to messages state\n  };\n\n  // Clear messages when the user logs out\n  useEffect(() => {\n    if (!isLoggedIn) {\n      console.log('User logged out. Clearing chat messages...');\n      setMessages([]); // Clear messages on logout\n    }\n  }, [isLoggedIn]); // Runs when `isLoggedIn` changes\n\n  // Render initial bot messages when the user is logged in\n  useEffect(() => {\n    if (isFirstMessage && isLoggedIn) {\n      console.log('Setting initial messages for logged-in user...');\n      setMessages([\"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\", \"To start, we need to ask some basic questions. Type 'OK' to continue.\"]);\n      setIsFirstMessage(false); // Prevent resetting the messages after the first time\n    }\n  }, [isFirstMessage, isLoggedIn]); // Run when `isFirstMessage` or `isLoggedIn` changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(Widget, {\n      handleNewUserMessage: handleNewUserMessage,\n      profileAvatar: avatar,\n      title: \"AI Healthcare Assistant\",\n      subtitle: \"How can I help you today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"HaUDLPEbSZ+tLSePxTml9/hg4jE=\", false, function () {\n  return [useUser];\n});\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useEffect","useState","axios","Widget","addResponseMessage","avatar","useUser","jsxDEV","_jsxDEV","Chatbot","_s","isLoggedIn","isFirstMessage","setIsFirstMessage","messages","setMessages","handleNewUserMessage","message","console","log","get","params","msg","withCredentials","then","response","botMessage","data","renderBotResponse","catch","error","tempDiv","document","createElement","innerHTML","cleanMessage","innerText","prevMessages","className","children","profileAvatar","title","subtitle","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/asits/OneDrive/Desktop/integrate/frontend/src/components/Chatbot.js"],"sourcesContent":["\n\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Widget, addResponseMessage, deleteMessages } from 'react-chat-widget';\n// import 'react-chat-widget/lib/styles.css';\n// import avatar from '../assets/chatbot-avatar.png';\n// import { useUser } from '../pages/UserContext'; // Import UserContext for logout handling\n\n// const Chatbot = () => {\n//   const { isLoggedIn } = useUser(); // Check if the user is logged in\n//   const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n//   // Function to handle new user messages\n//   const handleNewUserMessage = (message) => {\n//     console.log(`New message incoming: ${message}`);\n//     // Send the message to the backend\n//     axios\n//       .get('http://localhost:5000/get', {\n//         params: { msg: message },\n//         withCredentials: true, // Ensure cookies (sessions) are included\n//       })\n//       .then((response) => {\n//         const botMessage = response.data;\n//         console.log(\"Bot response: \", botMessage);\n//         renderBotResponse(botMessage);\n//       })\n//       .catch((error) => {\n//         console.error('Error getting response from the bot:', error);\n//         addResponseMessage('Sorry, something went wrong.');\n//       });\n//   };\n\n//   // Function to render bot responses with HTML\n//   const renderBotResponse = (message) => {\n//     const tempDiv = document.createElement('div');\n//     tempDiv.innerHTML = message;\n//     const cleanMessage = tempDiv.innerText || message;\n//     addResponseMessage(cleanMessage);\n//   };\n\n//   // Clear messages when the user logs out or when the page reloads\n//   useEffect(() => {\n//     if (!isLoggedIn) {\n//       console.log('User logged out. Clearing chat messages...');\n//       deleteMessages(); // Clear the chat messages on logout\n//       setIsFirstMessage(true); // Reset the first message state for the next user\n//     }\n//   }, [isLoggedIn]); // Runs every time `isLoggedIn` changes\n\n//   // Render initial bot messages when the user is logged in\n//   useEffect(() => {\n//     if (isFirstMessage && isLoggedIn) {\n//       console.log('Setting initial messages for logged-in user...');\n//       addResponseMessage(\"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\");\n//       addResponseMessage(\"To start, we need to ask some basic questions. Type 'OK' to continue.\");\n//       setIsFirstMessage(false);\n//     }\n//   }, [isFirstMessage, isLoggedIn]); // Run when `isFirstMessage` or `isLoggedIn` changes\n\n//   return (\n//     <div className=\"chat-container\">\n//       <Widget\n//         handleNewUserMessage={handleNewUserMessage}\n//         profileAvatar={avatar}\n//         title=\"AI Healthcare Assistant\"\n//         subtitle=\"How can I help you today?\"\n//       />\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\n\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Widget, addResponseMessage } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport avatar from '../assets/chatbot-avatar.png';\nimport { useUser } from '../pages/UserContext'; // Import UserContext for logout handling\n\nconst Chatbot = () => {\n  const { isLoggedIn } = useUser(); // Check if the user is logged in\n  const [isFirstMessage, setIsFirstMessage] = useState(true);\n  const [messages, setMessages] = useState([]); // State to store chat messages\n\n  // Function to handle new user messages\n  const handleNewUserMessage = (message) => {\n    console.log(`New message incoming: ${message}`);\n    // Send the message to the backend\n    axios\n      .get('http://localhost:5000/get', {\n        params: { msg: message },\n        withCredentials: true, // Ensure cookies (sessions) are included\n      })\n      .then((response) => {\n        const botMessage = response.data;\n        console.log(\"Bot response: \", botMessage);\n        renderBotResponse(botMessage);\n      })\n      .catch((error) => {\n        console.error('Error getting response from the bot:', error);\n        addResponseMessage('Sorry, something went wrong.');\n      });\n  };\n\n  // Function to render bot responses with HTML\n  const renderBotResponse = (message) => {\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = message;\n    const cleanMessage = tempDiv.innerText || message;\n    setMessages((prevMessages) => [...prevMessages, cleanMessage]); // Add to messages state\n  };\n\n  // Clear messages when the user logs out\n  useEffect(() => {\n    if (!isLoggedIn) {\n      console.log('User logged out. Clearing chat messages...');\n      setMessages([]); // Clear messages on logout\n    }\n  }, [isLoggedIn]); // Runs when `isLoggedIn` changes\n\n  // Render initial bot messages when the user is logged in\n  useEffect(() => {\n    if (isFirstMessage && isLoggedIn) {\n      console.log('Setting initial messages for logged-in user...');\n      setMessages([\n        \"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\",\n        \"To start, we need to ask some basic questions. Type 'OK' to continue.\"\n      ]);\n      setIsFirstMessage(false); // Prevent resetting the messages after the first time\n    }\n  }, [isFirstMessage, isLoggedIn]); // Run when `isFirstMessage` or `isLoggedIn` changes\n\n  return (\n    <div className=\"chat-container\">\n      <Widget\n        handleNewUserMessage={handleNewUserMessage}\n        profileAvatar={avatar}\n        title=\"AI Healthcare Assistant\"\n        subtitle=\"How can I help you today?\"\n      />\n      {/* Optionally render the messages manually in case Widget doesn't handle it automatically */}\n      {/* The widget itself will automatically render the messages added using addResponseMessage */}\n    </div>\n  );\n};\n\nexport default Chatbot;\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}