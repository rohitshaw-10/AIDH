{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asits\\\\OneDrive\\\\Desktop\\\\integrate\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { useUser } from './UserContext'; // Import UserContext\n// import SymptomDropdown from './SymptomDropdown.js';\n// import axios from 'axios';\n// import Footer from '../components/Footer';\n// import Loader from './Loader'; // Assuming you have a loader component\n\n// const Home = () => {\n//   const { isLoggedIn } = useUser(); // Access login state\n//   const navigate = useNavigate();\n//   const [symptoms, setSymptoms] = useState('');\n//   const [Results, setResult] = useState('');\n//   const [isListening, setIsListening] = useState(false);\n//   const [selectedSymptoms, setSelectedSymptoms] = useState([]);\n//   const [suggestions, setSuggestions] = useState('');\n//   const [showFooter, setShowFooter] = useState(true);\n//   const [selectedResult, setSelectedResult] = useState('');\n//   const [predictionMade, setPredictionMade] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const handleSpeechRecognition = () => {\n//     if (!('webkitSpeechRecognition' in window)) {\n//       alert('Speech recognition not supported in this browser.');\n//       return;\n//     }\n\n//     const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n//     recognition.lang = 'en-US';\n//     recognition.interimResults = false;\n//     recognition.maxAlternatives = 1;\n\n//     recognition.onstart = () => {\n//       setIsListening(true);\n//     };\n\n//     recognition.onresult = (event) => {\n//       const speechResult = event.results[0][0].transcript;\n//       setSymptoms((prev) => `${prev} ${speechResult}`.trim());\n//     };\n\n//     recognition.onend = () => {\n//       setIsListening(false);\n//     };\n\n//     recognition.start();\n//   };\n\n//   const handleSymptomChange = (selectedOptions) => {\n//     setSelectedSymptoms(selectedOptions);\n//     setSymptoms(selectedOptions.map(option => option.label).join(', '));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//   if (isLoggedIn && !symptoms.trim()) { // Check if symptoms are empty\n//     alert('Please enter symptoms before predicting.');\n//     return;\n//   }\n\n//     if (!isLoggedIn) {\n//       alert('Please log in to predict.');\n//       navigate('/login');\n//       return;\n//     }\n//     setLoading(true);\n//     setError(null);\n\n//     try {\n//       const response = await axios.post('http://localhost:5000/api/general', {\n//         symptoms,\n//       });\n//       console.log(response.data);\n//       setResult(response.data);\n//       setPredictionMade(true);\n//     } catch (error) {\n//       console.error('Error submitting the form', error);\n//       setError('An error occurred while fetching the prediction.'); // Set error message\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const handleClear = () => {\n//     setSymptoms('');\n//     setResult('');\n//     setSelectedSymptoms([]);\n//     setSelectedResult('');\n//     setPredictionMade(false);\n//     setSuggestions('');\n//   };\n\n//   const handleResultClick = (resultType) => {\n//     if (!predictionMade) {\n//       alert('You haven\\'t predicted the disease yet. Please click \"Predict\" first.');\n//     } else {\n//       setSelectedResult(resultType);\n//     }\n//   };\n\n//   const recommendations = suggestions ? suggestions : symptoms;\n\n//   useEffect(() => {\n//     const handleScroll = () => {\n//       if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\n//         setShowFooter(false);\n//       } else {\n//         setShowFooter(true);\n//       }\n//     };\n\n//     window.addEventListener('scroll', handleScroll);\n//     return () => {\n//       window.removeEventListener('scroll', handleScroll);\n//     };\n//   }, []);\n\n//   const renderSelectedResult = () => {\n//     if (!predictionMade) {\n//       return null;\n//     }\n\n//     switch (selectedResult) {\n//       case 'Disease':\n//         return <p>{Results.predicted_disease}</p>;\n//       case 'Description':\n//         return <p>{Results.description}</p>;\n//       case 'Precaution':\n//         return <ul>{Results.precautions[0].map((item, index) => <li key={index}>{item}</li>)}</ul>;\n//       case 'Medications':\n//         return <ul>{Results.medications[0].split(', ').map((item, index) => <li key={index}>{item}</li>)}</ul>;\n//       case 'Workouts':\n//         return <ul>{Results.workout.map((item, index) => <li key={index}>{item}</li>)}</ul>;\n//       case 'Diets':\n//         return <ul>{Results.diets[0].split(', ').map((item, index) => <li key={index}>{item}</li>)}</ul>;\n//       default:\n//         return null;\n//     }\n//   };\n\n//   return (\n//     <div style={styles.pageContainer}>\n//       <div style={styles.contentWrapper}>\n//         <div style={styles.mainSection}>\n//           <h1 style={styles.header}>Health Care Center</h1>\n//           <div style={styles.card}>\n//             <SymptomDropdown setSuggestions={setSuggestions} />\n//             <input\n//               type=\"text\"\n//               id=\"symptoms\"\n//               value={symptoms}\n//               onChange={(e) => setSymptoms(e.target.value)}\n//               placeholder=\"Type symptoms such as itching, sleeping, aching etc.\"\n//               style={styles.input}\n//             />\n//             <button\n//               onClick={handleSpeechRecognition}\n//               style={styles.button}\n//               disabled={isListening}\n//             >\n//               {isListening ? 'Listening...' : 'Start Speech Recognition'}\n//             </button>\n//             <button style={styles.button} onClick={handleSubmit} disabled={loading}>\n//               {loading ? 'Loading...' : 'Predict'}\n//             </button>\n//             <button style={styles.button} onClick={handleClear}>Clear</button>\n//             <div style={styles.recommendations}>\n//               <h3 style={styles.recommendationHeader}>Recommendations:</h3>\n//               <p style={styles.recommendationText}>{recommendations}</p>\n//             </div>\n//             {error && <p style={styles.errorText}>{error}</p>}\n//           </div>\n//         </div>\n\n//         <div style={styles.resultsSection}>\n//           <h2 style={styles.resultsHeader}>Our AI System Results</h2>\n\n//           <div style={styles.buttonGroup}>\n//             <button style={styles.resultButton} onClick={() => handleResultClick('Disease')}>Disease</button>\n//             <button style={styles.resultButton} onClick={() => handleResultClick('Description')}>Description</button>\n//             <button style={styles.resultButton} onClick={() => handleResultClick('Precaution')}>Precaution</button>\n//             <button style={styles.resultButton} onClick={() => handleResultClick('Medications')}>Medications</button>\n//             <button style={styles.resultButton} onClick={() => handleResultClick('Workouts')}>Workouts</button>\n//             <button style={styles.resultButton} onClick={() => handleResultClick('Diets')}>Diets</button>\n//           </div>\n\n//           <div style={styles.resultCard}>\n//             {renderSelectedResult()}\n//           </div>\n//         </div>\n//       </div>\n\n//       {showFooter && <Footer />}\n//     </div>\n//   );\n// };\n// const styles = {\n//   pageContainer: {\n//     display: 'flex',\n//     flexDirection: 'column',\n//     minHeight: '100vh',\n//     marginTop: '64px',\n//   },\n//   contentWrapper: {\n//     flex: 1,\n//     display: 'flex',\n//     flexDirection: 'column',\n//     alignItems: 'center',\n//     padding: '20px',\n//   },\n//   mainSection: {\n//     display: 'flex',\n//     flexDirection: 'column',\n//     alignItems: 'center',\n//     backgroundColor: '#f7f7f7',\n//     padding: '20px',\n//     borderRadius: '8px',\n//     boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n//     width: '100%',\n//     maxWidth: '800px',\n//     flex: 1,\n//   },\n//   header: {\n//     fontSize: '2rem',\n//     marginBottom: '20px',\n//   },\n//   card: {\n//     backgroundColor: '#fff',\n//     padding: '20px',\n//     borderRadius: '8px',\n//     boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n//     width: '100%',\n//   },\n//   input: {\n//     width: '100%',\n//     padding: '10px',\n//     marginBottom: '10px',\n//     border: '1px solid #ddd',\n//     borderRadius: '4px',\n//   },\n//   button: {\n//     backgroundColor: '#007bff',\n//     color: 'white',\n//     padding: '10px',\n//     border: 'none',\n//     borderRadius: '4px',\n//     cursor: 'pointer',\n//     fontSize: '16px',\n//     marginBottom: '10px',\n//     width: '100%',\n//   },\n//   recommendations: {\n//     marginTop: '20px',\n//     maxHeight: '150px',\n//     overflowY: 'auto',\n//     wordWrap: 'break-word',\n//   },\n//   recommendationHeader: {\n//     fontSize: '1.2rem',\n//     marginBottom: '10px',\n//   },\n//   recommendationText: {\n//     fontSize: '1rem',\n//     color: '#333',\n//   },\n//   resultsSection: {\n//     textAlign: 'center',\n//     marginTop: '30px',\n//     width: '100%',\n//     maxWidth: '800px',\n//     flexShrink: 0,\n//   },\n//   resultsHeader: {\n//     fontSize: '1.5rem',\n//     marginBottom: '20px',\n//   },\n//   buttonGroup: {\n//     display: 'flex',\n//     flexWrap: 'wrap',\n//     gap: '10px',\n//     justifyContent: 'center',\n//   },\n//   resultButton: {\n//     backgroundColor: '#007bff',\n//     color: 'white',\n//     padding: '10px',\n//     border: 'none',\n//     borderRadius: '4px',\n//     cursor: 'pointer',\n//     fontSize: '16px',\n//     width: '120px',\n//   },\n//   resultCard: {\n//     marginTop: '20px',\n//     textAlign: 'left',\n//     width: '100%',\n//     backgroundColor: '#fff',\n//     padding: '20px',\n//     borderRadius: '8px',\n//     boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n//   },\n//   errorText: {\n//     color: 'red',\n//     fontWeight: 'bold',\n//     marginTop: '10px',\n//   },\n// };\n\n// export default Home;\n\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { useUser } from './UserContext';\n// import SymptomDropdown from './SymptomDropdown';\n// import axios from 'axios';\n// import Footer from '../components/Footer';\n// import BarChart from './BarChart'; // Import BarChart component\n// import ResultsButtons from './ResultsButtons'; // Import ResultsButtons component\n// import DetailedView from './DetailedView'; // Import DetailedView component\n// import Loader from './Loader';\n\n// const Home = () => {\n//   const { isLoggedIn } = useUser();\n//   const navigate = useNavigate();\n//   const [symptoms, setSymptoms] = useState('');\n//   const [results, setResults] = useState([]);\n//   const [selectedDisease, setSelectedDisease] = useState(null);\n//   const [selectedResultType, setSelectedResultType] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!isLoggedIn) {\n//       alert('Please log in to predict.');\n//       navigate('/login');\n//       return;\n//     }\n\n//     if (!symptoms.trim()) {\n//       alert('Please enter symptoms before predicting.');\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError(null);\n\n//     try {\n//       const response = await axios.post('http://localhost:5000/api/general', {\n//         symptoms,\n//       });\n//       setResults(response.data);\n//       setSelectedDisease(null); // Reset selection\n//       setSelectedResultType(null);\n//     } catch (error) {\n//       console.error('Error fetching prediction:', error);\n//       setError('An error occurred while fetching predictions.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleDiseaseSelection = (disease) => {\n//     setSelectedDisease(disease);\n//     setSelectedResultType(null); // Reset result type when a new disease is selected\n//   };\n\n//   const handleResultTypeSelection = (resultType) => {\n//     if (!selectedDisease) {\n//       alert('Please select a disease from the chart first.');\n//       return;\n//     }\n//     setSelectedResultType(resultType);\n//   };\n\n//   return (\n//     <div style={styles.pageContainer}>\n//       <div style={styles.contentWrapper}>\n//         <div style={styles.mainSection}>\n//           <h1 style={styles.header}>Health Care Center</h1>\n//           <div style={styles.card}>\n//             <SymptomDropdown setSymptoms={setSymptoms} />\n//             <input\n//               type=\"text\"\n//               value={symptoms}\n//               onChange={(e) => setSymptoms(e.target.value)}\n//               placeholder=\"Enter symptoms...\"\n//               style={styles.input}\n//             />\n//             <button onClick={handleSubmit} style={styles.button} disabled={loading}>\n//               {loading ? <Loader /> : 'Predict'}\n//             </button>\n//           </div>\n//         </div>\n\n//         <div style={styles.resultsSection}>\n//           <h2 style={styles.resultsHeader}>Disease Probabilities</h2>\n//           {results.length > 0 && (\n//             <BarChart data={results} onClick={handleDiseaseSelection} />\n//           )}\n//           {error && <p style={styles.errorText}>{error}</p>}\n\n//           {selectedDisease && (\n//             <>\n//               <ResultsButtons onClick={handleResultTypeSelection} />\n//               <DetailedView\n//                 disease={selectedDisease}\n//                 resultType={selectedResultType}\n//               />\n//             </>\n//           )}\n//         </div>\n//       </div>\n\n//     </div>\n//   );\n// };\n\n// const styles = {\n//   pageContainer: {\n//     display: 'flex',\n//     flexDirection: 'column',\n//     minHeight: '100vh',\n//   },\n//   contentWrapper: {\n//     flex: 1,\n//     display: 'flex',\n//     flexDirection: 'column',\n//     alignItems: 'center',\n//     padding: '20px',\n//   },\n//   mainSection: {\n//     backgroundColor: '#f7f7f7',\n//     padding: '20px',\n//     borderRadius: '8px',\n//     boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n//     width: '100%',\n//     maxWidth: '800px',\n//   },\n//   header: { fontSize: '2rem', marginBottom: '20px' },\n//   card: { marginBottom: '20px' },\n//   input: {\n//     width: '100%',\n//     padding: '10px',\n//     marginBottom: '10px',\n//     border: '1px solid #ddd',\n//     borderRadius: '4px',\n//   },\n//   button: { width: '100%', padding: '10px', borderRadius: '4px' },\n//   resultsSection: { marginTop: '30px', textAlign: 'center', width: '100%' },\n//   resultsHeader: { fontSize: '1.5rem', marginBottom: '20px' },\n//   errorText: { color: 'red' },\n// };\n\n// export default Home;\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useUser } from './UserContext';\nimport SymptomDropdown from './SymptomDropdown';\nimport axios from 'axios';\nimport Footer from '../components/Footer';\nimport BarChart from './BarChart'; // Import BarChart component\nimport ResultsButtons from './ResultsButtons'; // Import ResultsButtons component\nimport DetailedView from './DetailedView'; // Import DetailedView component\nimport Loader from './Loader'; // Import Loader (if used)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const {\n    isLoggedIn\n  } = useUser();\n  const navigate = useNavigate();\n  const [symptoms, setSymptoms] = useState('');\n  const [results, setResults] = useState([]);\n  const [selectedDisease, setSelectedDisease] = useState(null);\n  const [selectedResultType, setSelectedResultType] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isListening, setIsListening] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!isLoggedIn) {\n      alert('Please log in to predict.');\n      navigate('/login');\n      return;\n    }\n    if (!symptoms.trim()) {\n      alert('Please enter symptoms before predicting.');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post('http://localhost:5000/api/general', {\n        symptoms\n      });\n      setResults(response.data);\n      setSelectedDisease(null);\n      setSelectedResultType(null);\n    } catch (error) {\n      console.error('Error fetching prediction:', error);\n      setError('An error occurred while fetching predictions.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSpeechRecognition = () => {\n    setIsListening(!isListening);\n  };\n  const handleClear = () => {\n    setSymptoms('');\n    setResults([]);\n    setSelectedDisease(null);\n    setSelectedResultType(null);\n  };\n\n  // Define handleDiseaseSelection\n  const handleDiseaseSelection = disease => {\n    setSelectedDisease(disease);\n    setSelectedResultType(null);\n  };\n\n  // Define handleResultTypeSelection\n  const handleResultTypeSelection = resultType => {\n    if (!selectedDisease) {\n      alert('Please select a disease from the chart first.');\n      return;\n    }\n    setSelectedResultType(resultType);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.pageContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.contentWrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.mainSection,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: styles.header,\n          children: \"Health Care Center\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.card,\n          children: [/*#__PURE__*/_jsxDEV(SymptomDropdown, {\n            setSymptoms: setSymptoms\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: symptoms,\n            onChange: e => setSymptoms(e.target.value),\n            placeholder: \"Enter symptoms...\",\n            style: styles.input\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.buttonGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSpeechRecognition,\n              style: styles.button,\n              disabled: isListening,\n              children: isListening ? 'Listening...' : 'Start Speech Recognition'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: styles.button,\n              onClick: handleSubmit,\n              disabled: loading,\n              children: loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 564,\n                columnNumber: 28\n              }, this) : 'Predict'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 559,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: styles.button,\n              onClick: handleClear,\n              children: \"Clear\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resultsSection,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: styles.resultsHeader,\n          children: \"Disease Probabilities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 11\n        }, this), results.length > 0 && /*#__PURE__*/_jsxDEV(BarChart, {\n          data: results,\n          onClick: handleDiseaseSelection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: styles.errorText,\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 21\n        }, this), selectedDisease && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ResultsButtons, {\n            onClick: handleResultTypeSelection\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DetailedView, {\n            disease: selectedDisease,\n            resultType: selectedResultType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 538,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"3Ua6fUJgE8ria2mIHoMIP/V5+jU=\", false, function () {\n  return [useUser, useNavigate];\n});\n_c = Home;\nconst styles = {\n  pageContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '100vh',\n    marginTop: '64px'\n  },\n  contentWrapper: {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '20px'\n  },\n  mainSection: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    backgroundColor: '#f7f7f7',\n    padding: '20px',\n    borderRadius: '8px',\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n    width: '100%',\n    maxWidth: '800px',\n    flex: 1\n  },\n  header: {\n    fontSize: '2rem',\n    marginBottom: '20px'\n  },\n  card: {\n    backgroundColor: '#fff',\n    padding: '20px',\n    borderRadius: '8px',\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n    width: '100%'\n  },\n  input: {\n    width: '100%',\n    padding: '10px',\n    marginBottom: '10px',\n    border: '1px solid #ddd',\n    borderRadius: '4px'\n  },\n  button: {\n    backgroundColor: '#007bff',\n    color: 'white',\n    padding: '10px',\n    border: 'none',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    fontSize: '16px',\n    marginBottom: '10px',\n    width: '100%'\n  },\n  buttonGroup: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '10px',\n    width: '100%'\n  },\n  resultsSection: {\n    textAlign: 'center',\n    marginTop: '30px',\n    width: '100%',\n    maxWidth: '800px',\n    flexShrink: 0\n  },\n  resultsHeader: {\n    fontSize: '1.5rem',\n    marginBottom: '20px'\n  },\n  errorText: {\n    color: 'red',\n    fontWeight: 'bold',\n    marginTop: '10px'\n  }\n};\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useUser","SymptomDropdown","axios","Footer","BarChart","ResultsButtons","DetailedView","Loader","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","isLoggedIn","navigate","symptoms","setSymptoms","results","setResults","selectedDisease","setSelectedDisease","selectedResultType","setSelectedResultType","loading","setLoading","error","setError","isListening","setIsListening","handleSubmit","e","preventDefault","alert","trim","response","post","data","console","handleSpeechRecognition","handleClear","handleDiseaseSelection","disease","handleResultTypeSelection","resultType","style","styles","pageContainer","children","contentWrapper","mainSection","header","fileName","_jsxFileName","lineNumber","columnNumber","card","type","value","onChange","target","placeholder","input","buttonGroup","onClick","button","disabled","resultsSection","resultsHeader","length","errorText","_c","display","flexDirection","minHeight","marginTop","flex","alignItems","padding","backgroundColor","borderRadius","boxShadow","width","maxWidth","fontSize","marginBottom","border","color","cursor","gap","textAlign","flexShrink","fontWeight","$RefreshReg$"],"sources":["C:/Users/asits/OneDrive/Desktop/integrate/frontend/src/pages/Home.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { useUser } from './UserContext'; // Import UserContext\n// import SymptomDropdown from './SymptomDropdown.js';\n// import axios from 'axios';\n// import Footer from '../components/Footer';\n// import Loader from './Loader'; // Assuming you have a loader component\n\n// const Home = () => {\n//   const { isLoggedIn } = useUser(); // Access login state\n//   const navigate = useNavigate();\n//   const [symptoms, setSymptoms] = useState('');\n//   const [Results, setResult] = useState('');\n//   const [isListening, setIsListening] = useState(false);\n//   const [selectedSymptoms, setSelectedSymptoms] = useState([]);\n//   const [suggestions, setSuggestions] = useState('');\n//   const [showFooter, setShowFooter] = useState(true);\n//   const [selectedResult, setSelectedResult] = useState('');\n//   const [predictionMade, setPredictionMade] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const handleSpeechRecognition = () => {\n//     if (!('webkitSpeechRecognition' in window)) {\n//       alert('Speech recognition not supported in this browser.');\n//       return;\n//     }\n\n//     const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n//     recognition.lang = 'en-US';\n//     recognition.interimResults = false;\n//     recognition.maxAlternatives = 1;\n\n//     recognition.onstart = () => {\n//       setIsListening(true);\n//     };\n\n//     recognition.onresult = (event) => {\n//       const speechResult = event.results[0][0].transcript;\n//       setSymptoms((prev) => `${prev} ${speechResult}`.trim());\n//     };\n\n//     recognition.onend = () => {\n//       setIsListening(false);\n//     };\n\n//     recognition.start();\n//   };\n\n//   const handleSymptomChange = (selectedOptions) => {\n//     setSelectedSymptoms(selectedOptions);\n//     setSymptoms(selectedOptions.map(option => option.label).join(', '));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//   if (isLoggedIn && !symptoms.trim()) { // Check if symptoms are empty\n//     alert('Please enter symptoms before predicting.');\n//     return;\n//   }\n\n//     if (!isLoggedIn) {\n//       alert('Please log in to predict.');\n//       navigate('/login');\n//       return;\n//     }\n//     setLoading(true);\n//     setError(null);\n\n//     try {\n//       const response = await axios.post('http://localhost:5000/api/general', {\n//         symptoms,\n//       });\n//       console.log(response.data);\n//       setResult(response.data);\n//       setPredictionMade(true);\n//     } catch (error) {\n//       console.error('Error submitting the form', error);\n//       setError('An error occurred while fetching the prediction.'); // Set error message\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const handleClear = () => {\n//     setSymptoms('');\n//     setResult('');\n//     setSelectedSymptoms([]);\n//     setSelectedResult('');\n//     setPredictionMade(false);\n//     setSuggestions('');\n//   };\n\n//   const handleResultClick = (resultType) => {\n//     if (!predictionMade) {\n//       alert('You haven\\'t predicted the disease yet. Please click \"Predict\" first.');\n//     } else {\n//       setSelectedResult(resultType);\n//     }\n//   };\n\n//   const recommendations = suggestions ? suggestions : symptoms;\n\n//   useEffect(() => {\n//     const handleScroll = () => {\n//       if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\n//         setShowFooter(false);\n//       } else {\n//         setShowFooter(true);\n//       }\n//     };\n\n//     window.addEventListener('scroll', handleScroll);\n//     return () => {\n//       window.removeEventListener('scroll', handleScroll);\n//     };\n//   }, []);\n\n//   const renderSelectedResult = () => {\n//     if (!predictionMade) {\n//       return null;\n//     }\n\n//     switch (selectedResult) {\n//       case 'Disease':\n//         return <p>{Results.predicted_disease}</p>;\n//       case 'Description':\n//         return <p>{Results.description}</p>;\n//       case 'Precaution':\n//         return <ul>{Results.precautions[0].map((item, index) => <li key={index}>{item}</li>)}</ul>;\n//       case 'Medications':\n//         return <ul>{Results.medications[0].split(', ').map((item, index) => <li key={index}>{item}</li>)}</ul>;\n//       case 'Workouts':\n//         return <ul>{Results.workout.map((item, index) => <li key={index}>{item}</li>)}</ul>;\n//       case 'Diets':\n//         return <ul>{Results.diets[0].split(', ').map((item, index) => <li key={index}>{item}</li>)}</ul>;\n//       default:\n//         return null;\n//     }\n//   };\n\n//   return (\n//     <div style={styles.pageContainer}>\n//       <div style={styles.contentWrapper}>\n//         <div style={styles.mainSection}>\n//           <h1 style={styles.header}>Health Care Center</h1>\n//           <div style={styles.card}>\n//             <SymptomDropdown setSuggestions={setSuggestions} />\n//             <input\n//               type=\"text\"\n//               id=\"symptoms\"\n//               value={symptoms}\n//               onChange={(e) => setSymptoms(e.target.value)}\n//               placeholder=\"Type symptoms such as itching, sleeping, aching etc.\"\n//               style={styles.input}\n//             />\n//             <button\n//               onClick={handleSpeechRecognition}\n//               style={styles.button}\n//               disabled={isListening}\n//             >\n//               {isListening ? 'Listening...' : 'Start Speech Recognition'}\n//             </button>\n//             <button style={styles.button} onClick={handleSubmit} disabled={loading}>\n//               {loading ? 'Loading...' : 'Predict'}\n//             </button>\n//             <button style={styles.button} onClick={handleClear}>Clear</button>\n//             <div style={styles.recommendations}>\n//               <h3 style={styles.recommendationHeader}>Recommendations:</h3>\n//               <p style={styles.recommendationText}>{recommendations}</p>\n//             </div>\n//             {error && <p style={styles.errorText}>{error}</p>}\n//           </div>\n//         </div>\n\n//         <div style={styles.resultsSection}>\n//           <h2 style={styles.resultsHeader}>Our AI System Results</h2>\n\n//           <div style={styles.buttonGroup}>\n//             <button style={styles.resultButton} onClick={() => handleResultClick('Disease')}>Disease</button>\n//             <button style={styles.resultButton} onClick={() => handleResultClick('Description')}>Description</button>\n//             <button style={styles.resultButton} onClick={() => handleResultClick('Precaution')}>Precaution</button>\n//             <button style={styles.resultButton} onClick={() => handleResultClick('Medications')}>Medications</button>\n//             <button style={styles.resultButton} onClick={() => handleResultClick('Workouts')}>Workouts</button>\n//             <button style={styles.resultButton} onClick={() => handleResultClick('Diets')}>Diets</button>\n//           </div>\n\n//           <div style={styles.resultCard}>\n//             {renderSelectedResult()}\n//           </div>\n//         </div>\n//       </div>\n\n//       {showFooter && <Footer />}\n//     </div>\n//   );\n// };\n// const styles = {\n//   pageContainer: {\n//     display: 'flex',\n//     flexDirection: 'column',\n//     minHeight: '100vh',\n//     marginTop: '64px',\n//   },\n//   contentWrapper: {\n//     flex: 1,\n//     display: 'flex',\n//     flexDirection: 'column',\n//     alignItems: 'center',\n//     padding: '20px',\n//   },\n//   mainSection: {\n//     display: 'flex',\n//     flexDirection: 'column',\n//     alignItems: 'center',\n//     backgroundColor: '#f7f7f7',\n//     padding: '20px',\n//     borderRadius: '8px',\n//     boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n//     width: '100%',\n//     maxWidth: '800px',\n//     flex: 1,\n//   },\n//   header: {\n//     fontSize: '2rem',\n//     marginBottom: '20px',\n//   },\n//   card: {\n//     backgroundColor: '#fff',\n//     padding: '20px',\n//     borderRadius: '8px',\n//     boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n//     width: '100%',\n//   },\n//   input: {\n//     width: '100%',\n//     padding: '10px',\n//     marginBottom: '10px',\n//     border: '1px solid #ddd',\n//     borderRadius: '4px',\n//   },\n//   button: {\n//     backgroundColor: '#007bff',\n//     color: 'white',\n//     padding: '10px',\n//     border: 'none',\n//     borderRadius: '4px',\n//     cursor: 'pointer',\n//     fontSize: '16px',\n//     marginBottom: '10px',\n//     width: '100%',\n//   },\n//   recommendations: {\n//     marginTop: '20px',\n//     maxHeight: '150px',\n//     overflowY: 'auto',\n//     wordWrap: 'break-word',\n//   },\n//   recommendationHeader: {\n//     fontSize: '1.2rem',\n//     marginBottom: '10px',\n//   },\n//   recommendationText: {\n//     fontSize: '1rem',\n//     color: '#333',\n//   },\n//   resultsSection: {\n//     textAlign: 'center',\n//     marginTop: '30px',\n//     width: '100%',\n//     maxWidth: '800px',\n//     flexShrink: 0,\n//   },\n//   resultsHeader: {\n//     fontSize: '1.5rem',\n//     marginBottom: '20px',\n//   },\n//   buttonGroup: {\n//     display: 'flex',\n//     flexWrap: 'wrap',\n//     gap: '10px',\n//     justifyContent: 'center',\n//   },\n//   resultButton: {\n//     backgroundColor: '#007bff',\n//     color: 'white',\n//     padding: '10px',\n//     border: 'none',\n//     borderRadius: '4px',\n//     cursor: 'pointer',\n//     fontSize: '16px',\n//     width: '120px',\n//   },\n//   resultCard: {\n//     marginTop: '20px',\n//     textAlign: 'left',\n//     width: '100%',\n//     backgroundColor: '#fff',\n//     padding: '20px',\n//     borderRadius: '8px',\n//     boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n//   },\n//   errorText: {\n//     color: 'red',\n//     fontWeight: 'bold',\n//     marginTop: '10px',\n//   },\n// };\n\n// export default Home;\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { useUser } from './UserContext';\n// import SymptomDropdown from './SymptomDropdown';\n// import axios from 'axios';\n// import Footer from '../components/Footer';\n// import BarChart from './BarChart'; // Import BarChart component\n// import ResultsButtons from './ResultsButtons'; // Import ResultsButtons component\n// import DetailedView from './DetailedView'; // Import DetailedView component\n// import Loader from './Loader';\n\n// const Home = () => {\n//   const { isLoggedIn } = useUser();\n//   const navigate = useNavigate();\n//   const [symptoms, setSymptoms] = useState('');\n//   const [results, setResults] = useState([]);\n//   const [selectedDisease, setSelectedDisease] = useState(null);\n//   const [selectedResultType, setSelectedResultType] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!isLoggedIn) {\n//       alert('Please log in to predict.');\n//       navigate('/login');\n//       return;\n//     }\n\n//     if (!symptoms.trim()) {\n//       alert('Please enter symptoms before predicting.');\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError(null);\n\n//     try {\n//       const response = await axios.post('http://localhost:5000/api/general', {\n//         symptoms,\n//       });\n//       setResults(response.data);\n//       setSelectedDisease(null); // Reset selection\n//       setSelectedResultType(null);\n//     } catch (error) {\n//       console.error('Error fetching prediction:', error);\n//       setError('An error occurred while fetching predictions.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleDiseaseSelection = (disease) => {\n//     setSelectedDisease(disease);\n//     setSelectedResultType(null); // Reset result type when a new disease is selected\n//   };\n\n//   const handleResultTypeSelection = (resultType) => {\n//     if (!selectedDisease) {\n//       alert('Please select a disease from the chart first.');\n//       return;\n//     }\n//     setSelectedResultType(resultType);\n//   };\n\n//   return (\n//     <div style={styles.pageContainer}>\n//       <div style={styles.contentWrapper}>\n//         <div style={styles.mainSection}>\n//           <h1 style={styles.header}>Health Care Center</h1>\n//           <div style={styles.card}>\n//             <SymptomDropdown setSymptoms={setSymptoms} />\n//             <input\n//               type=\"text\"\n//               value={symptoms}\n//               onChange={(e) => setSymptoms(e.target.value)}\n//               placeholder=\"Enter symptoms...\"\n//               style={styles.input}\n//             />\n//             <button onClick={handleSubmit} style={styles.button} disabled={loading}>\n//               {loading ? <Loader /> : 'Predict'}\n//             </button>\n//           </div>\n//         </div>\n\n//         <div style={styles.resultsSection}>\n//           <h2 style={styles.resultsHeader}>Disease Probabilities</h2>\n//           {results.length > 0 && (\n//             <BarChart data={results} onClick={handleDiseaseSelection} />\n//           )}\n//           {error && <p style={styles.errorText}>{error}</p>}\n\n//           {selectedDisease && (\n//             <>\n//               <ResultsButtons onClick={handleResultTypeSelection} />\n//               <DetailedView\n//                 disease={selectedDisease}\n//                 resultType={selectedResultType}\n//               />\n//             </>\n//           )}\n//         </div>\n//       </div>\n      \n//     </div>\n//   );\n// };\n\n// const styles = {\n//   pageContainer: {\n//     display: 'flex',\n//     flexDirection: 'column',\n//     minHeight: '100vh',\n//   },\n//   contentWrapper: {\n//     flex: 1,\n//     display: 'flex',\n//     flexDirection: 'column',\n//     alignItems: 'center',\n//     padding: '20px',\n//   },\n//   mainSection: {\n//     backgroundColor: '#f7f7f7',\n//     padding: '20px',\n//     borderRadius: '8px',\n//     boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n//     width: '100%',\n//     maxWidth: '800px',\n//   },\n//   header: { fontSize: '2rem', marginBottom: '20px' },\n//   card: { marginBottom: '20px' },\n//   input: {\n//     width: '100%',\n//     padding: '10px',\n//     marginBottom: '10px',\n//     border: '1px solid #ddd',\n//     borderRadius: '4px',\n//   },\n//   button: { width: '100%', padding: '10px', borderRadius: '4px' },\n//   resultsSection: { marginTop: '30px', textAlign: 'center', width: '100%' },\n//   resultsHeader: { fontSize: '1.5rem', marginBottom: '20px' },\n//   errorText: { color: 'red' },\n// };\n\n// export default Home;\n\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useUser } from './UserContext';\nimport SymptomDropdown from './SymptomDropdown';\nimport axios from 'axios';\nimport Footer from '../components/Footer';\nimport BarChart from './BarChart'; // Import BarChart component\nimport ResultsButtons from './ResultsButtons'; // Import ResultsButtons component\nimport DetailedView from './DetailedView'; // Import DetailedView component\nimport Loader from './Loader'; // Import Loader (if used)\n\nconst Home = () => {\n  const { isLoggedIn } = useUser();\n  const navigate = useNavigate();\n  const [symptoms, setSymptoms] = useState('');\n  const [results, setResults] = useState([]);\n  const [selectedDisease, setSelectedDisease] = useState(null);\n  const [selectedResultType, setSelectedResultType] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isListening, setIsListening] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!isLoggedIn) {\n      alert('Please log in to predict.');\n      navigate('/login');\n      return;\n    }\n    if (!symptoms.trim()) {\n      alert('Please enter symptoms before predicting.');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post('http://localhost:5000/api/general', { symptoms });\n      setResults(response.data);\n      setSelectedDisease(null);\n      setSelectedResultType(null);\n    } catch (error) {\n      console.error('Error fetching prediction:', error);\n      setError('An error occurred while fetching predictions.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSpeechRecognition = () => {\n    setIsListening(!isListening);\n  };\n\n  const handleClear = () => {\n    setSymptoms('');\n    setResults([]);\n    setSelectedDisease(null);\n    setSelectedResultType(null);\n  };\n\n  // Define handleDiseaseSelection\n  const handleDiseaseSelection = (disease) => {\n    setSelectedDisease(disease);\n    setSelectedResultType(null);\n  };\n\n  // Define handleResultTypeSelection\n  const handleResultTypeSelection = (resultType) => {\n    if (!selectedDisease) {\n      alert('Please select a disease from the chart first.');\n      return;\n    }\n    setSelectedResultType(resultType);\n  };\n\n  return (\n    <div style={styles.pageContainer}>\n      <div style={styles.contentWrapper}>\n        <div style={styles.mainSection}>\n          <h1 style={styles.header}>Health Care Center</h1>\n          <div style={styles.card}>\n            <SymptomDropdown setSymptoms={setSymptoms} />\n            <input\n              type=\"text\"\n              value={symptoms}\n              onChange={(e) => setSymptoms(e.target.value)}\n              placeholder=\"Enter symptoms...\"\n              style={styles.input}\n            />\n            <div style={styles.buttonGroup}>\n              <button\n                onClick={handleSpeechRecognition}\n                style={styles.button}\n                disabled={isListening}\n              >\n                {isListening ? 'Listening...' : 'Start Speech Recognition'}\n              </button>\n              <button\n                style={styles.button}\n                onClick={handleSubmit}\n                disabled={loading}\n              >\n                {loading ? <Loader /> : 'Predict'}\n              </button>\n              <button style={styles.button} onClick={handleClear}>\n                Clear\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div style={styles.resultsSection}>\n          <h2 style={styles.resultsHeader}>Disease Probabilities</h2>\n          {results.length > 0 && (\n            <BarChart data={results} onClick={handleDiseaseSelection} />\n          )}\n          {error && <p style={styles.errorText}>{error}</p>}\n\n          {selectedDisease && (\n            <>\n              <ResultsButtons onClick={handleResultTypeSelection} />\n              <DetailedView\n                disease={selectedDisease}\n                resultType={selectedResultType}\n              />\n            </>\n          )}\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nconst styles = {\n  pageContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '100vh',\n    marginTop: '64px',\n  },\n  contentWrapper: {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '20px',\n  },\n  mainSection: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    backgroundColor: '#f7f7f7',\n    padding: '20px',\n    borderRadius: '8px',\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n    width: '100%',\n    maxWidth: '800px',\n    flex: 1,\n  },\n  header: {\n    fontSize: '2rem',\n    marginBottom: '20px',\n  },\n  card: {\n    backgroundColor: '#fff',\n    padding: '20px',\n    borderRadius: '8px',\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n    width: '100%',\n  },\n  input: {\n    width: '100%',\n    padding: '10px',\n    marginBottom: '10px',\n    border: '1px solid #ddd',\n    borderRadius: '4px',\n  },\n  button: {\n    backgroundColor: '#007bff',\n    color: 'white',\n    padding: '10px',\n    border: 'none',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    fontSize: '16px',\n    marginBottom: '10px',\n    width: '100%',\n  },\n  buttonGroup: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '10px',\n    width: '100%',\n  },\n  resultsSection: {\n    textAlign: 'center',\n    marginTop: '30px',\n    width: '100%',\n    maxWidth: '800px',\n    flexShrink: 0,\n  },\n  resultsHeader: {\n    fontSize: '1.5rem',\n    marginBottom: '20px',\n  },\n  errorText: {\n    color: 'red',\n    fontWeight: 'bold',\n    marginTop: '10px',\n  },\n};\n\nexport default Home;\n\n\n\n\n\n\n\n\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,OAAO,QAAQ,eAAe;AACvC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,QAAQ,MAAM,YAAY,CAAC,CAAC;AACnC,OAAOC,cAAc,MAAM,kBAAkB,CAAC,CAAC;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}