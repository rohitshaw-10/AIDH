{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asits\\\\OneDrive\\\\Desktop\\\\integrate\\\\frontend\\\\src\\\\pages\\\\UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// const UserContext = createContext();\n\n// export const UserProvider = ({ children }) => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [userEmail, setUserEmail] = useState('');\n\n//   // Effect to check local storage on initial render\n//   useEffect(() => {\n//     const storedEmail = localStorage.getItem('userEmail');\n//     if (storedEmail) {\n//       setIsLoggedIn(true);\n//       setUserEmail(storedEmail);\n//     }\n//   }, []);\n\n//   const login = (email) => {\n//     setIsLoggedIn(true);\n//     setUserEmail(email);\n//     localStorage.setItem('userEmail', email); // Save email to local storage\n//   };\n\n//   const logout = () => {\n//     setIsLoggedIn(false);\n//     setUserEmail('');\n//     localStorage.removeItem('userEmail'); // Remove email from local storage\n//   };\n\n//   return (\n//     <UserContext.Provider value={{ isLoggedIn, userEmail, login, logout }}>\n//       {children}\n//     </UserContext.Provider>\n//   );\n// };\n\n// export const useUser = () => useContext(UserContext);\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userEmail, setUserEmail] = useState('');\n\n  // Validate session on initial render\n  useEffect(() => {\n    const validateSession = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/validate-session', {\n          withCredentials: true\n        });\n        if (response.data.valid) {\n          const storedEmail = localStorage.getItem('userEmail');\n          if (storedEmail) {\n            setIsLoggedIn(true);\n            setUserEmail(storedEmail);\n          }\n        } else {\n          logout(); // Clear state if session is invalid\n        }\n      } catch (error) {\n        console.error('Error validating session:', error);\n        logout();\n      }\n    };\n    validateSession();\n  }, []);\n  const login = email => {\n    setIsLoggedIn(true);\n    setUserEmail(email);\n    localStorage.setItem('userEmail', email); // Save email to local storage\n  };\n  const logout = async () => {\n    try {\n      console.log(\"Sending logout request to server...\");\n      await axios.post('http://localhost:5000/api/logout', {}, {\n        withCredentials: true\n      });\n      console.log(\"Logout request completed\");\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n    setIsLoggedIn(false);\n    setUserEmail('');\n    localStorage.removeItem('userEmail'); // Remove email from local storage\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      isLoggedIn,\n      userEmail,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"ABoUT6noavazhmPNYSyKIDl50UM=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  return useContext(UserContext);\n};\n_s2(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","isLoggedIn","setIsLoggedIn","userEmail","setUserEmail","validateSession","response","get","withCredentials","data","valid","storedEmail","localStorage","getItem","logout","error","console","login","email","setItem","log","post","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","$RefreshReg$"],"sources":["C:/Users/asits/OneDrive/Desktop/integrate/frontend/src/pages/UserContext.js"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// const UserContext = createContext();\r\n\r\n// export const UserProvider = ({ children }) => {\r\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n//   const [userEmail, setUserEmail] = useState('');\r\n\r\n//   // Effect to check local storage on initial render\r\n//   useEffect(() => {\r\n//     const storedEmail = localStorage.getItem('userEmail');\r\n//     if (storedEmail) {\r\n//       setIsLoggedIn(true);\r\n//       setUserEmail(storedEmail);\r\n//     }\r\n//   }, []);\r\n\r\n//   const login = (email) => {\r\n//     setIsLoggedIn(true);\r\n//     setUserEmail(email);\r\n//     localStorage.setItem('userEmail', email); // Save email to local storage\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setIsLoggedIn(false);\r\n//     setUserEmail('');\r\n//     localStorage.removeItem('userEmail'); // Remove email from local storage\r\n//   };\r\n\r\n//   return (\r\n//     <UserContext.Provider value={{ isLoggedIn, userEmail, login, logout }}>\r\n//       {children}\r\n//     </UserContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export const useUser = () => useContext(UserContext);\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userEmail, setUserEmail] = useState('');\r\n\r\n  // Validate session on initial render\r\n  useEffect(() => {\r\n    const validateSession = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/validate-session', {\r\n          withCredentials: true,\r\n        });\r\n        if (response.data.valid) {\r\n          const storedEmail = localStorage.getItem('userEmail');\r\n          if (storedEmail) {\r\n            setIsLoggedIn(true);\r\n            setUserEmail(storedEmail);\r\n          }\r\n        } else {\r\n          logout(); // Clear state if session is invalid\r\n        }\r\n      } catch (error) {\r\n        console.error('Error validating session:', error);\r\n        logout();\r\n      }\r\n    };\r\n  \r\n    validateSession();\r\n  }, []);\r\n  \r\n\r\n  const login = (email) => {\r\n    setIsLoggedIn(true);\r\n    setUserEmail(email);\r\n    localStorage.setItem('userEmail', email); // Save email to local storage\r\n  };\r\n\r\n  \r\n\r\n  const logout = async () => {\r\n    try {\r\n      console.log(\"Sending logout request to server...\");\r\n      await axios.post('http://localhost:5000/api/logout', {}, { withCredentials: true });\r\n      console.log(\"Logout request completed\");\r\n    } catch (error) {\r\n      console.error('Error during logout:', error);\r\n    }\r\n    setIsLoggedIn(false);\r\n    setUserEmail('');\r\n    localStorage.removeItem('userEmail'); // Remove email from local storage\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={{ isLoggedIn, userEmail, login, logout }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useUser = () => useContext(UserContext);\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}