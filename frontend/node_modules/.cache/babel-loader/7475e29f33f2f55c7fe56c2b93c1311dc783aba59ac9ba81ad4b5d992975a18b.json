{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asits\\\\OneDrive\\\\Desktop\\\\integrate\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Widget } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport avatar from '../assets/chatbot-avatar.png'; // Ensure this path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]); // state to store messages\n  const [isFirstMessage, setIsFirstMessage] = useState(true); // to track if it's the first message\n\n  // Function to handle new user messages\n  const handleNewUserMessage = message => {\n    console.log(`New message incoming: ${message}`);\n\n    // Add the user's message to the chat (for internal state)\n    setMessages(prevMessages => [...prevMessages, {\n      user: true,\n      text: message\n    } // push user message to state\n    ]);\n\n    // Send the message to the Flask backend\n    axios.get('http://localhost:5002/get', {\n      params: {\n        msg: message\n      }\n    }).then(response => {\n      const botMessage = response.data;\n      console.log(botMessage);\n      setMessages(prevMessages => [...prevMessages, {\n        user: false,\n        text: botMessage\n      } // push bot response to state\n      ]);\n    }).catch(error => {\n      console.error('Error getting response from the bot:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        user: false,\n        text: 'Sorry, something went wrong.'\n      } // Error handling\n      ]);\n    });\n  };\n\n  // Effect hook for initializing first messages\n  useEffect(() => {\n    if (isFirstMessage) {\n      // Initially set the messages\n      setMessages([{\n        user: false,\n        text: \"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\"\n      }, {\n        user: false,\n        text: \"To start, we need to ask some basic questions. Type 'OK' to continue.\"\n      }]);\n      setIsFirstMessage(false); // Set this flag to false so this effect doesn't run again\n    }\n  }, [isFirstMessage]);\n\n  // Custom function to handle bot responses with dynamic delay for realism (optional)\n  const simulateBotTyping = () => {\n    setMessages(prevMessages => [...prevMessages, {\n      user: false,\n      text: '...',\n      typing: true\n    } // Add a \"typing\" message\n    ]);\n    setTimeout(() => {\n      // Remove typing message and add actual bot response\n      setMessages(prevMessages => {\n        const updatedMessages = prevMessages.filter(msg => !msg.typing); // Remove typing message\n        updatedMessages.push({\n          user: false,\n          text: \"Here's the bot's reply!\"\n        }); // Add real bot message\n        return updatedMessages;\n      });\n    }, 1500); // Simulate bot typing delay\n  };\n\n  // Render the chat widget with the necessary props\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Widget, {\n      handleNewUserMessage: handleNewUserMessage,\n      profileAvatar: avatar,\n      title: \"AI Healthcare Assistant\",\n      subtitle: \"How can I help you today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"GHQqd81H+rWdM6JgUGRcT6YXBWE=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","axios","Widget","avatar","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","isFirstMessage","setIsFirstMessage","handleNewUserMessage","message","console","log","prevMessages","user","text","get","params","msg","then","response","botMessage","data","catch","error","simulateBotTyping","typing","setTimeout","updatedMessages","filter","push","children","profileAvatar","title","subtitle","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/asits/OneDrive/Desktop/integrate/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Widget } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport avatar from '../assets/chatbot-avatar.png'; // Ensure this path is correct\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]); // state to store messages\n  const [isFirstMessage, setIsFirstMessage] = useState(true); // to track if it's the first message\n\n  // Function to handle new user messages\n  const handleNewUserMessage = (message) => {\n    console.log(`New message incoming: ${message}`);\n\n    // Add the user's message to the chat (for internal state)\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { user: true, text: message }, // push user message to state\n    ]);\n\n    // Send the message to the Flask backend\n    axios\n      .get('http://localhost:5002/get', { params: { msg: message } })\n      .then((response) => {\n        const botMessage = response.data;\n        console.log(botMessage);\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { user: false, text: botMessage }, // push bot response to state\n        ]);\n      })\n      .catch((error) => {\n        console.error('Error getting response from the bot:', error);\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { user: false, text: 'Sorry, something went wrong.' }, // Error handling\n        ]);\n      });\n  };\n\n  // Effect hook for initializing first messages\n  useEffect(() => {\n    if (isFirstMessage) {\n      // Initially set the messages\n      setMessages([\n        { user: false, text: \"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\" },\n        { user: false, text: \"To start, we need to ask some basic questions. Type 'OK' to continue.\" },\n      ]);\n      setIsFirstMessage(false); // Set this flag to false so this effect doesn't run again\n    }\n  }, [isFirstMessage]);\n\n  // Custom function to handle bot responses with dynamic delay for realism (optional)\n  const simulateBotTyping = () => {\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { user: false, text: '...', typing: true }, // Add a \"typing\" message\n    ]);\n\n    setTimeout(() => {\n      // Remove typing message and add actual bot response\n      setMessages((prevMessages) => {\n        const updatedMessages = prevMessages.filter((msg) => !msg.typing); // Remove typing message\n        updatedMessages.push({ user: false, text: \"Here's the bot's reply!\" }); // Add real bot message\n        return updatedMessages;\n      });\n    }, 1500); // Simulate bot typing delay\n  };\n\n  // Render the chat widget with the necessary props\n  return (\n    <div>\n      <Widget\n        handleNewUserMessage={handleNewUserMessage}\n        profileAvatar={avatar}\n        title=\"AI Healthcare Assistant\"\n        subtitle=\"How can I help you today?\"\n      />\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}