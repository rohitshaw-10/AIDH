{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asits\\\\OneDrive\\\\Desktop\\\\integrate\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport avatar from '../assets/chatbot-avatar.png'; // Add the avatar image in your assets folder\nimport './Chatbot.css'; // Add your CSS styles here\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n  // Function to handle new user messages\n  const handleNewUserMessage = message => {\n    console.log(`New message incoming: ${message}`);\n\n    // Add the user's message to the chat\n    setMessages(prevMessages => [...prevMessages, {\n      user: true,\n      text: message\n    }]);\n\n    // Send the message to the Flask backend\n    axios.get('http://localhost:5002/get', {\n      params: {\n        msg: message\n      }\n    }).then(response => {\n      const botMessage = response.data;\n      setMessages(prevMessages => [...prevMessages, {\n        user: false,\n        text: botMessage\n      }]);\n    }).catch(error => {\n      console.error('Error getting response from the bot:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        user: false,\n        text: \"Sorry, something went wrong.\"\n      }]);\n    });\n  };\n\n  // Handle form submission\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (inputText.trim() !== '') {\n      handleNewUserMessage(inputText);\n      setInputText('');\n    }\n  };\n\n  // Function to render the messages\n  const renderMessages = () => {\n    return messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `msg ${msg.user ? 'right-msg' : 'left-msg'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"msg-img\",\n        style: {\n          backgroundImage: `url(${avatar})`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"msg-bubble\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"msg-info\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"msg-info-name\",\n            children: msg.user ? 'You' : 'Robo-Doc'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"msg-text\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this));\n  };\n\n  // Render initial bot messages\n  useEffect(() => {\n    if (isFirstMessage) {\n      setMessages([{\n        user: false,\n        text: \"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\"\n      }, {\n        user: false,\n        text: \"To start, we need to ask some basic questions. Type 'OK' to continue.\"\n      }]);\n      setIsFirstMessage(false);\n    }\n  }, [isFirstMessage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"msger\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"msger-header\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"msger-header-title\",\n          children: \"Robo-Doc\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"msger-chat\",\n        children: renderMessages()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"msger-inputarea\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"msger-input\",\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          placeholder: \"Enter your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"msger-send-btn\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"IPsIfq1Gwf9EVq4uw+uMc245wvY=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","axios","avatar","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","inputText","setInputText","isFirstMessage","setIsFirstMessage","handleNewUserMessage","message","console","log","prevMessages","user","text","get","params","msg","then","response","botMessage","data","catch","error","handleSubmit","event","preventDefault","trim","renderMessages","map","index","className","children","style","backgroundImage","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/asits/OneDrive/Desktop/integrate/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport avatar from '../assets/chatbot-avatar.png'; // Add the avatar image in your assets folder\nimport './Chatbot.css'; // Add your CSS styles here\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n  // Function to handle new user messages\n  const handleNewUserMessage = (message) => {\n    console.log(`New message incoming: ${message}`);\n    \n    // Add the user's message to the chat\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { user: true, text: message },\n    ]);\n\n    // Send the message to the Flask backend\n    axios\n      .get('http://localhost:5002/get', { params: { msg: message } })\n      .then((response) => {\n        const botMessage = response.data;\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { user: false, text: botMessage },\n        ]);\n      })\n      .catch((error) => {\n        console.error('Error getting response from the bot:', error);\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { user: false, text: \"Sorry, something went wrong.\" },\n        ]);\n      });\n  };\n\n  // Handle form submission\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (inputText.trim() !== '') {\n      handleNewUserMessage(inputText);\n      setInputText('');\n    }\n  };\n\n  // Function to render the messages\n  const renderMessages = () => {\n    return messages.map((msg, index) => (\n      <div className={`msg ${msg.user ? 'right-msg' : 'left-msg'}`} key={index}>\n        <div className=\"msg-img\" style={{ backgroundImage: `url(${avatar})` }}></div>\n        <div className=\"msg-bubble\">\n          <div className=\"msg-info\">\n            <div className=\"msg-info-name\">{msg.user ? 'You' : 'Robo-Doc'}</div>\n          </div>\n          <div className=\"msg-text\">{msg.text}</div>\n        </div>\n      </div>\n    ));\n  };\n\n  // Render initial bot messages\n  useEffect(() => {\n    if (isFirstMessage) {\n      setMessages([\n        { user: false, text: \"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\" },\n        { user: false, text: \"To start, we need to ask some basic questions. Type 'OK' to continue.\" },\n      ]);\n      setIsFirstMessage(false);\n    }\n  }, [isFirstMessage]);\n\n  return (\n    <div className=\"chatbot-container\">\n      <section className=\"msger\">\n        <header className=\"msger-header\">\n          <div className=\"msger-header-title\">Robo-Doc</div>\n        </header>\n\n        <main className=\"msger-chat\">\n          {renderMessages()}\n        </main>\n\n        <form className=\"msger-inputarea\" onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"msger-input\"\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n            placeholder=\"Enter your message...\"\n          />\n          <button type=\"submit\" className=\"msger-send-btn\">Send</button>\n        </form>\n      </section>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}