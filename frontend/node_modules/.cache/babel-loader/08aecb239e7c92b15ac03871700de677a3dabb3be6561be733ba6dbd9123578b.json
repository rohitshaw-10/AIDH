{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asits\\\\OneDrive\\\\Desktop\\\\integrate\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Widget } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport avatar from '../assets/chatbot-avatar.png'; // Make sure you have a chatbot avatar image in the assets folder\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n  // Function to handle new user messages\n  const handleNewUserMessage = message => {\n    console.log(`New message incoming: ${message}`);\n\n    // Add the user's message to the chat\n    setMessages(prevMessages => [...prevMessages, {\n      user: true,\n      text: message\n    }]);\n\n    // Send the message to the Flask backend\n    axios.get('http://localhost:5002/get', {\n      params: {\n        msg: message\n      }\n    }).then(response => {\n      const botMessage = response.data;\n      setMessages(prevMessages => [...prevMessages, {\n        user: false,\n        text: botMessage\n      }]);\n    }).catch(error => {\n      console.error('Error getting response from the bot:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        user: false,\n        text: 'Sorry, something went wrong.'\n      }]);\n    });\n  };\n\n  // Render initial bot messages\n  useEffect(() => {\n    if (isFirstMessage) {\n      setMessages([{\n        user: false,\n        text: \"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\"\n      }, {\n        user: false,\n        text: \"To start, we need to ask some basic questions. Type 'OK' to continue.\"\n      }]);\n      setIsFirstMessage(false);\n    }\n  }, [isFirstMessage]);\n\n  // Function to render the messages in the widget\n  const renderMessages = () => {\n    return messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: msg.user ? 'row-reverse' : 'row',\n          marginBottom: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '50px',\n            height: '50px',\n            marginRight: '10px',\n            background: '#ddd',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundSize: 'cover',\n            borderRadius: '50%',\n            backgroundImage: `url(${avatar})`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            maxWidth: '450px',\n            padding: '15px',\n            borderRadius: '15px',\n            backgroundColor: msg.user ? '#579ffb' : '#ececec',\n            color: msg.user ? '#fff' : '#000'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: msg.user ? 'You' : 'Robo-Doc'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Widget, {\n      handleNewUserMessage: handleNewUserMessage,\n      profileAvatar: avatar,\n      title: \"AI Healthcare Assistant\",\n      subtitle: \"How can I help you today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderMessages()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"GHQqd81H+rWdM6JgUGRcT6YXBWE=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","axios","Widget","avatar","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","isFirstMessage","setIsFirstMessage","handleNewUserMessage","message","console","log","prevMessages","user","text","get","params","msg","then","response","botMessage","data","catch","error","renderMessages","map","index","children","style","display","flexDirection","marginBottom","width","height","marginRight","background","backgroundRepeat","backgroundPosition","backgroundSize","borderRadius","backgroundImage","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","padding","backgroundColor","color","profileAvatar","title","subtitle","_c","$RefreshReg$"],"sources":["C:/Users/asits/OneDrive/Desktop/integrate/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Widget } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport avatar from '../assets/chatbot-avatar.png'; // Make sure you have a chatbot avatar image in the assets folder\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n  // Function to handle new user messages\n  const handleNewUserMessage = (message) => {\n    console.log(`New message incoming: ${message}`);\n\n    // Add the user's message to the chat\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { user: true, text: message },\n    ]);\n\n    // Send the message to the Flask backend\n    axios\n      .get('http://localhost:5002/get', { params: { msg: message } })\n      .then((response) => {\n        const botMessage = response.data;\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { user: false, text: botMessage },\n        ]);\n      })\n      .catch((error) => {\n        console.error('Error getting response from the bot:', error);\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { user: false, text: 'Sorry, something went wrong.' },\n        ]);\n      });\n  };\n\n  // Render initial bot messages\n  useEffect(() => {\n    if (isFirstMessage) {\n      setMessages([\n        { user: false, text: \"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\" },\n        { user: false, text: \"To start, we need to ask some basic questions. Type 'OK' to continue.\" },\n      ]);\n      setIsFirstMessage(false);\n    }\n  }, [isFirstMessage]);\n\n  // Function to render the messages in the widget\n  const renderMessages = () => {\n    return messages.map((msg, index) => (\n      <div key={index}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: msg.user ? 'row-reverse' : 'row',\n            marginBottom: '10px',\n          }}\n        >\n          <div\n            style={{\n              width: '50px',\n              height: '50px',\n              marginRight: '10px',\n              background: '#ddd',\n              backgroundRepeat: 'no-repeat',\n              backgroundPosition: 'center',\n              backgroundSize: 'cover',\n              borderRadius: '50%',\n              backgroundImage: `url(${avatar})`,\n            }}\n          ></div>\n          <div\n            style={{\n              maxWidth: '450px',\n              padding: '15px',\n              borderRadius: '15px',\n              backgroundColor: msg.user ? '#579ffb' : '#ececec',\n              color: msg.user ? '#fff' : '#000',\n            }}\n          >\n            <div>{msg.user ? 'You' : 'Robo-Doc'}</div>\n            <div>{msg.text}</div>\n          </div>\n        </div>\n      </div>\n    ));\n  };\n\n  return (\n    <div>\n      <Widget\n        handleNewUserMessage={handleNewUserMessage}\n        profileAvatar={avatar}\n        title=\"AI Healthcare Assistant\"\n        subtitle=\"How can I help you today?\"\n      />\n      <div>{renderMessages()}</div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}