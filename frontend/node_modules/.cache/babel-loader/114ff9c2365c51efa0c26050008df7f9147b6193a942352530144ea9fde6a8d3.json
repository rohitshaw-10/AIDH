{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asits\\\\OneDrive\\\\Desktop\\\\integrate\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Widget, addResponseMessage } from 'react-chat-widget'; // No need for addUserMessage\n// import 'react-chat-widget/lib/styles.css'; // Import default styles\n// import avatar from '../assets/chatbot-avatar.png'; // Ensure the avatar path is correct\n\n// const Chatbot = () => {\n//   const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n//   // Function to handle new user messages\n//   const handleNewUserMessage = (message) => {\n//     console.log(`New message incoming: ${message}`);\n\n//     // Send the message to the Flask backend\n//     axios\n//       .get('http://localhost:5002/get', { params: { msg: message } })\n//       .then((response) => {\n//         // Ensure the response is a string\n//         const botMessage = typeof response.data === 'string' ? response.data : JSON.stringify(response.data);\n//         console.log(\"Bot response: \", botMessage);\n\n//         // Add the bot's response to the chat\n//         addResponseMessage(botMessage);\n//       })\n//       .catch((error) => {\n//         console.error('Error getting response from the bot:', error);\n//         addResponseMessage('Sorry, something went wrong.');\n//       });\n//   };\n\n//   // Render initial bot messages\n//   useEffect(() => {\n//     if (isFirstMessage) {\n//       console.log('Setting initial messages...');\n//       addResponseMessage(\"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\");\n//       addResponseMessage(\"To start, we need to ask some basic questions. Type 'OK' to continue.\");\n//       setIsFirstMessage(false);\n//     }\n//   }, [isFirstMessage]);\n\n//   return (\n//     <div className=\"chat-container\">\n//       <Widget\n//         handleNewUserMessage={handleNewUserMessage}\n//         profileAvatar={avatar}\n//         title=\"AI Healthcare Assistant\"\n//         subtitle=\"How can I help you today?\"\n//       />\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Widget, addResponseMessage } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport avatar from '../assets/chatbot-avatar.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n  // Function to handle new user messages\n  const handleNewUserMessage = message => {\n    console.log(`New message incoming: ${message}`);\n\n    // Send the message to the Flask backend\n    axios.get('http://localhost:5002/get', {\n      params: {\n        msg: message\n      }\n    }).then(response => {\n      // Ensure the response is a string\n      const botMessage = typeof response.data === 'string' ? response.data : JSON.stringify(response.data);\n      console.log(\"Bot response: \", botMessage);\n\n      // Add the bot's response to the chat\n      addResponseMessage(botMessage);\n    }).catch(error => {\n      console.error('Error getting response from the bot:', error);\n      addResponseMessage('Sorry, something went wrong.');\n    });\n  };\n\n  // Render initial bot messages\n  useEffect(() => {\n    if (isFirstMessage) {\n      console.log('Setting initial messages...');\n      addResponseMessage(\"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\");\n      addResponseMessage(\"To start, we need to ask some basic questions. Type 'OK' to continue.\");\n      setIsFirstMessage(false);\n    }\n  }, [isFirstMessage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(Widget, {\n      handleNewUserMessage: handleNewUserMessage,\n      profileAvatar: avatar,\n      title: \"AI Healthcare Assistant\",\n      subtitle: \"How can I help you today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"6LkxeTbk/XZvzHMdYQX+Hp7PJgM=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useEffect","useState","axios","Widget","addResponseMessage","avatar","jsxDEV","_jsxDEV","Chatbot","_s","isFirstMessage","setIsFirstMessage","handleNewUserMessage","message","console","log","get","params","msg","then","response","botMessage","data","JSON","stringify","catch","error","className","children","profileAvatar","title","subtitle","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/asits/OneDrive/Desktop/integrate/frontend/src/components/Chatbot.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Widget, addResponseMessage } from 'react-chat-widget'; // No need for addUserMessage\n// import 'react-chat-widget/lib/styles.css'; // Import default styles\n// import avatar from '../assets/chatbot-avatar.png'; // Ensure the avatar path is correct\n\n// const Chatbot = () => {\n//   const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n//   // Function to handle new user messages\n//   const handleNewUserMessage = (message) => {\n//     console.log(`New message incoming: ${message}`);\n\n//     // Send the message to the Flask backend\n//     axios\n//       .get('http://localhost:5002/get', { params: { msg: message } })\n//       .then((response) => {\n//         // Ensure the response is a string\n//         const botMessage = typeof response.data === 'string' ? response.data : JSON.stringify(response.data);\n//         console.log(\"Bot response: \", botMessage);\n\n//         // Add the bot's response to the chat\n//         addResponseMessage(botMessage);\n//       })\n//       .catch((error) => {\n//         console.error('Error getting response from the bot:', error);\n//         addResponseMessage('Sorry, something went wrong.');\n//       });\n//   };\n\n//   // Render initial bot messages\n//   useEffect(() => {\n//     if (isFirstMessage) {\n//       console.log('Setting initial messages...');\n//       addResponseMessage(\"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\");\n//       addResponseMessage(\"To start, we need to ask some basic questions. Type 'OK' to continue.\");\n//       setIsFirstMessage(false);\n//     }\n//   }, [isFirstMessage]);\n\n//   return (\n//     <div className=\"chat-container\">\n//       <Widget\n//         handleNewUserMessage={handleNewUserMessage}\n//         profileAvatar={avatar}\n//         title=\"AI Healthcare Assistant\"\n//         subtitle=\"How can I help you today?\"\n//       />\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\n\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Widget, addResponseMessage } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport avatar from '../assets/chatbot-avatar.png';\n\nconst Chatbot = () => {\n  const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n  // Function to handle new user messages\n  const handleNewUserMessage = (message) => {\n    console.log(`New message incoming: ${message}`);\n\n    // Send the message to the Flask backend\n    axios\n      .get('http://localhost:5002/get', { params: { msg: message } })\n      .then((response) => {\n        // Ensure the response is a string\n        const botMessage = typeof response.data === 'string' ? response.data : JSON.stringify(response.data);\n        console.log(\"Bot response: \", botMessage);\n\n        // Add the bot's response to the chat\n        addResponseMessage(botMessage);\n      })\n      .catch((error) => {\n        console.error('Error getting response from the bot:', error);\n        addResponseMessage('Sorry, something went wrong.');\n      });\n  };\n\n  // Render initial bot messages\n  useEffect(() => {\n    if (isFirstMessage) {\n      console.log('Setting initial messages...');\n      addResponseMessage(\"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\");\n      addResponseMessage(\"To start, we need to ask some basic questions. Type 'OK' to continue.\");\n      setIsFirstMessage(false);\n    }\n  }, [isFirstMessage]);\n\n  return (\n    <div className=\"chat-container\">\n      <Widget\n        handleNewUserMessage={handleNewUserMessage}\n        profileAvatar={avatar}\n        title=\"AI Healthcare Assistant\"\n        subtitle=\"How can I help you today?\"\n      />\n    </div>\n  );\n};\n\nexport default Chatbot;\n\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,kBAAkB,QAAQ,mBAAmB;AAC9D,OAAO,kCAAkC;AACzC,OAAOC,MAAM,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAE1D;EACA,MAAMW,oBAAoB,GAAIC,OAAO,IAAK;IACxCC,OAAO,CAACC,GAAG,CAAC,yBAAyBF,OAAO,EAAE,CAAC;;IAE/C;IACAX,KAAK,CACFc,GAAG,CAAC,2BAA2B,EAAE;MAAEC,MAAM,EAAE;QAAEC,GAAG,EAAEL;MAAQ;IAAE,CAAC,CAAC,CAC9DM,IAAI,CAAEC,QAAQ,IAAK;MAClB;MACA,MAAMC,UAAU,GAAG,OAAOD,QAAQ,CAACE,IAAI,KAAK,QAAQ,GAAGF,QAAQ,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAACE,IAAI,CAAC;MACpGR,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEM,UAAU,CAAC;;MAEzC;MACAjB,kBAAkB,CAACiB,UAAU,CAAC;IAChC,CAAC,CAAC,CACDI,KAAK,CAAEC,KAAK,IAAK;MAChBZ,OAAO,CAACY,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5DtB,kBAAkB,CAAC,8BAA8B,CAAC;IACpD,CAAC,CAAC;EACN,CAAC;;EAED;EACAJ,SAAS,CAAC,MAAM;IACd,IAAIU,cAAc,EAAE;MAClBI,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1CX,kBAAkB,CAAC,+EAA+E,CAAC;MACnGA,kBAAkB,CAAC,uEAAuE,CAAC;MAC3FO,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC,EAAE,CAACD,cAAc,CAAC,CAAC;EAEpB,oBACEH,OAAA;IAAKoB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,eAC7BrB,OAAA,CAACJ,MAAM;MACLS,oBAAoB,EAAEA,oBAAqB;MAC3CiB,aAAa,EAAExB,MAAO;MACtByB,KAAK,EAAC,yBAAyB;MAC/BC,QAAQ,EAAC;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA5CID,OAAO;AAAA4B,EAAA,GAAP5B,OAAO;AA8Cb,eAAeA,OAAO;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}