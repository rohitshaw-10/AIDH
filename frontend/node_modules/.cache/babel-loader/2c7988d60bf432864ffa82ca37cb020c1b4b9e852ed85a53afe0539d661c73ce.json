{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asits\\\\OneDrive\\\\Desktop\\\\integrate\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Widget } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport axios from 'axios'; // Import axios for HTTP requests\nimport avatar from '../assets/chatbot-avatar.png'; // Add a chatbot avatar image in the assets folder\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const handleNewUserMessage = message => {\n    console.log(`New message incoming: ${message}`);\n\n    // Append user's message to the chat\n    setMessages(prevMessages => [...prevMessages, {\n      user: true,\n      text: message\n    }]);\n\n    // Send the message to the Flask backend for a response\n    axios.get('http://localhost:5002/get', {\n      params: {\n        msg: message\n      }\n    }).then(response => {\n      const botMessage = response.data;\n      setMessages(prevMessages => [...prevMessages, {\n        user: false,\n        text: botMessage\n      }]);\n    }).catch(error => {\n      console.error('Error getting response from the bot:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        user: false,\n        text: \"Sorry, something went wrong.\"\n      }]);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Widget, {\n      handleNewUserMessage: handleNewUserMessage,\n      profileAvatar: avatar,\n      title: \"AI Healthcare Assistant\",\n      subtitle: \"How can I help you today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"dxxfFX7fiXmC0h9Fk+B7I5VonqM=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","Widget","axios","avatar","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","handleNewUserMessage","message","console","log","prevMessages","user","text","get","params","msg","then","response","botMessage","data","catch","error","children","profileAvatar","title","subtitle","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/asits/OneDrive/Desktop/integrate/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Widget } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport axios from 'axios';  // Import axios for HTTP requests\nimport avatar from '../assets/chatbot-avatar.png'; // Add a chatbot avatar image in the assets folder\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n\n  const handleNewUserMessage = (message) => {\n    console.log(`New message incoming: ${message}`);\n\n    // Append user's message to the chat\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { user: true, text: message },\n    ]);\n\n    // Send the message to the Flask backend for a response\n    axios\n      .get('http://localhost:5002/get', { params: { msg: message } })\n      .then((response) => {\n        const botMessage = response.data;\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { user: false, text: botMessage },\n        ]);\n      })\n      .catch((error) => {\n        console.error('Error getting response from the bot:', error);\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { user: false, text: \"Sorry, something went wrong.\" },\n        ]);\n      });\n  };\n\n  return (\n    <div>\n      <Widget\n        handleNewUserMessage={handleNewUserMessage}\n        profileAvatar={avatar}\n        title=\"AI Healthcare Assistant\"\n        subtitle=\"How can I help you today?\"\n      />\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,OAAO,kCAAkC;AACzC,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAE;AAC5B,OAAOC,MAAM,MAAM,8BAA8B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMU,oBAAoB,GAAIC,OAAO,IAAK;IACxCC,OAAO,CAACC,GAAG,CAAC,yBAAyBF,OAAO,EAAE,CAAC;;IAE/C;IACAF,WAAW,CAAEK,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;MAAEC,IAAI,EAAE,IAAI;MAAEC,IAAI,EAAEL;IAAQ,CAAC,CAC9B,CAAC;;IAEF;IACAT,KAAK,CACFe,GAAG,CAAC,2BAA2B,EAAE;MAAEC,MAAM,EAAE;QAAEC,GAAG,EAAER;MAAQ;IAAE,CAAC,CAAC,CAC9DS,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAMC,UAAU,GAAGD,QAAQ,CAACE,IAAI;MAChCd,WAAW,CAAEK,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;QAAEC,IAAI,EAAE,KAAK;QAAEC,IAAI,EAAEM;MAAW,CAAC,CAClC,CAAC;IACJ,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAK;MAChBb,OAAO,CAACa,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5DhB,WAAW,CAAEK,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;QAAEC,IAAI,EAAE,KAAK;QAAEC,IAAI,EAAE;MAA+B,CAAC,CACtD,CAAC;IACJ,CAAC,CAAC;EACN,CAAC;EAED,oBACEX,OAAA;IAAAqB,QAAA,eACErB,OAAA,CAACJ,MAAM;MACLS,oBAAoB,EAAEA,oBAAqB;MAC3CiB,aAAa,EAAExB,MAAO;MACtByB,KAAK,EAAC,yBAAyB;MAC/BC,QAAQ,EAAC;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAzCID,OAAO;AAAA4B,EAAA,GAAP5B,OAAO;AA2Cb,eAAeA,OAAO;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}