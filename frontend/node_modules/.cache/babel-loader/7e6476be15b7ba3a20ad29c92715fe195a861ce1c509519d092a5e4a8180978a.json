{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asits\\\\OneDrive\\\\Desktop\\\\integrate\\\\frontend\\\\src\\\\pages\\\\UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// const UserContext = createContext();\n\n// export const UserProvider = ({ children }) => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [userEmail, setUserEmail] = useState('');\n\n//   // Effect to check local storage on initial render\n//   useEffect(() => {\n//     const storedEmail = localStorage.getItem('userEmail');\n//     if (storedEmail) {\n//       setIsLoggedIn(true);\n//       setUserEmail(storedEmail);\n//     }\n//   }, []);\n\n//   const login = (email) => {\n//     setIsLoggedIn(true);\n//     setUserEmail(email);\n//     localStorage.setItem('userEmail', email); // Save email to local storage\n//   };\n\n//   const logout = () => {\n//     setIsLoggedIn(false);\n//     setUserEmail('');\n//     localStorage.removeItem('userEmail'); // Remove email from local storage\n//   };\n\n//   return (\n//     <UserContext.Provider value={{ isLoggedIn, userEmail, login, logout }}>\n//       {children}\n//     </UserContext.Provider>\n//   );\n// };\n\n// export const useUser = () => useContext(UserContext);\n\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const UserContext = createContext();\n\n// export const UserProvider = ({ children }) => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [userEmail, setUserEmail] = useState('');\n\n//   // Validate session on initial render\n//   useEffect(() => {\n//     const validateSession = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:5000/api/validate-session', {\n//           withCredentials: true,\n//         });\n//         if (response.data.valid) {\n//           const storedEmail = localStorage.getItem('userEmail');\n//           if (storedEmail) {\n//             setIsLoggedIn(true);\n//             setUserEmail(storedEmail);\n//           }\n//         } else {\n//           logout(); // Clear state if session is invalid\n//         }\n//       } catch (error) {\n//         console.error('Error validating session:', error);\n//         logout();\n//       }\n//     };\n\n//     validateSession();\n//   }, []);\n\n//   const login = (email) => {\n//     setIsLoggedIn(true);\n//     setUserEmail(email);\n//     localStorage.setItem('userEmail', email); // Save email to local storage\n//   };\n\n//   const logout = async () => {\n//     try {\n//       console.log(\"Sending logout request to server...\");\n//       const response = await axios.post(\n//         \"http://localhost:5000/api/logout\",\n//         {},\n//         { withCredentials: true }\n//       );\n//       console.log(\"Logout response:\", response.data);\n//       setIsLoggedIn(false);\n//         setUserEmail('');\n//     localStorage.removeItem('userEmail'); // Remove email from local storage\n//     } catch (error) {\n//       console.error(\"Error during logout:\", error.response || error.message);\n//     }\n//   };\n\n//   return (\n//     <UserContext.Provider value={{ isLoggedIn, userEmail, login, logout }}>\n//       {children}\n//     </UserContext.Provider>\n//   );\n// };\n\n// export const useUser = () => useContext(UserContext);\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userEmail, setUserEmail] = useState('');\n  const [userDetails, setUserDetails] = useState(null);\n\n  // Validate session on initial render\n  useEffect(() => {\n    const validateSession = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/validate-session', {\n          withCredentials: true // Ensure cookies are sent with the request\n        });\n        if (response.data.valid) {\n          const storedUserDetails = JSON.parse(localStorage.getItem('userDetails'));\n          if (storedUserDetails) {\n            setIsLoggedIn(true);\n            setUserEmail(storedUserDetails.email);\n            setUserDetails(storedUserDetails);\n          }\n        } else {\n          logout(); // Clear state if session is invalid\n        }\n      } catch (error) {\n        console.error('Error validating session:', error);\n        logout(); // Log out if validation fails\n      }\n    };\n    validateSession(); // Check session when the component mounts\n  }, []); // Run only once, when the component is mounted\n\n  const login = user => {\n    setIsLoggedIn(true);\n    setUserDetails(user);\n    setUserEmail(user.email);\n    localStorage.setItem('userEmail', user.email); // Save email to local storage\n    localStorage.setItem('userDetails', JSON.stringify(user)); // Save full user details\n  };\n  const logout = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/logout\", {}, {\n        withCredentials: true\n      } // Send cookies with logout request\n      );\n      console.log(\"Logout response:\", response.data);\n\n      // Clear state and local storage\n      setIsLoggedIn(false);\n      setUserDetails(null);\n      setUserEmail('');\n      localStorage.removeItem('userEmail');\n      localStorage.removeItem('userDetails');\n    } catch (error) {\n      console.error(\"Error during logout:\", error.response || error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      isLoggedIn,\n      userEmail,\n      userDetails,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"Voh8YTpvjkC282itZPzXIkHvK9M=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  return useContext(UserContext);\n};\n_s2(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","isLoggedIn","setIsLoggedIn","userEmail","setUserEmail","userDetails","setUserDetails","validateSession","response","get","withCredentials","data","valid","storedUserDetails","JSON","parse","localStorage","getItem","email","logout","error","console","login","user","setItem","stringify","post","log","removeItem","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","$RefreshReg$"],"sources":["C:/Users/asits/OneDrive/Desktop/integrate/frontend/src/pages/UserContext.js"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// const UserContext = createContext();\r\n\r\n// export const UserProvider = ({ children }) => {\r\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n//   const [userEmail, setUserEmail] = useState('');\r\n\r\n//   // Effect to check local storage on initial render\r\n//   useEffect(() => {\r\n//     const storedEmail = localStorage.getItem('userEmail');\r\n//     if (storedEmail) {\r\n//       setIsLoggedIn(true);\r\n//       setUserEmail(storedEmail);\r\n//     }\r\n//   }, []);\r\n\r\n//   const login = (email) => {\r\n//     setIsLoggedIn(true);\r\n//     setUserEmail(email);\r\n//     localStorage.setItem('userEmail', email); // Save email to local storage\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setIsLoggedIn(false);\r\n//     setUserEmail('');\r\n//     localStorage.removeItem('userEmail'); // Remove email from local storage\r\n//   };\r\n\r\n//   return (\r\n//     <UserContext.Provider value={{ isLoggedIn, userEmail, login, logout }}>\r\n//       {children}\r\n//     </UserContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export const useUser = () => useContext(UserContext);\r\n\r\n// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const UserContext = createContext();\r\n\r\n// export const UserProvider = ({ children }) => {\r\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n//   const [userEmail, setUserEmail] = useState('');\r\n\r\n//   // Validate session on initial render\r\n//   useEffect(() => {\r\n//     const validateSession = async () => {\r\n//       try {\r\n//         const response = await axios.get('http://localhost:5000/api/validate-session', {\r\n//           withCredentials: true,\r\n//         });\r\n//         if (response.data.valid) {\r\n//           const storedEmail = localStorage.getItem('userEmail');\r\n//           if (storedEmail) {\r\n//             setIsLoggedIn(true);\r\n//             setUserEmail(storedEmail);\r\n//           }\r\n//         } else {\r\n//           logout(); // Clear state if session is invalid\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Error validating session:', error);\r\n//         logout();\r\n//       }\r\n//     };\r\n  \r\n//     validateSession();\r\n//   }, []);\r\n  \r\n\r\n//   const login = (email) => {\r\n//     setIsLoggedIn(true);\r\n//     setUserEmail(email);\r\n//     localStorage.setItem('userEmail', email); // Save email to local storage\r\n//   };\r\n\r\n  \r\n\r\n//   const logout = async () => {\r\n//     try {\r\n//       console.log(\"Sending logout request to server...\");\r\n//       const response = await axios.post(\r\n//         \"http://localhost:5000/api/logout\",\r\n//         {},\r\n//         { withCredentials: true }\r\n//       );\r\n//       console.log(\"Logout response:\", response.data);\r\n//       setIsLoggedIn(false);\r\n//         setUserEmail('');\r\n//     localStorage.removeItem('userEmail'); // Remove email from local storage\r\n//     } catch (error) {\r\n//       console.error(\"Error during logout:\", error.response || error.message);\r\n//     }\r\n//   };\r\n  \r\n\r\n//   return (\r\n//     <UserContext.Provider value={{ isLoggedIn, userEmail, login, logout }}>\r\n//       {children}\r\n//     </UserContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export const useUser = () => useContext(UserContext);\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userEmail, setUserEmail] = useState('');\r\n  const [userDetails, setUserDetails] = useState(null);\r\n\r\n  // Validate session on initial render\r\n  useEffect(() => {\r\n    const validateSession = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/validate-session', {\r\n          withCredentials: true, // Ensure cookies are sent with the request\r\n        });\r\n\r\n        if (response.data.valid) {\r\n          const storedUserDetails = JSON.parse(localStorage.getItem('userDetails'));\r\n          if (storedUserDetails) {\r\n            setIsLoggedIn(true);\r\n            setUserEmail(storedUserDetails.email);\r\n            setUserDetails(storedUserDetails);\r\n          }\r\n        } else {\r\n          logout(); // Clear state if session is invalid\r\n        }\r\n      } catch (error) {\r\n        console.error('Error validating session:', error);\r\n        logout(); // Log out if validation fails\r\n      }\r\n    };\r\n\r\n    validateSession(); // Check session when the component mounts\r\n  }, []); // Run only once, when the component is mounted\r\n\r\n  const login = (user) => {\r\n    setIsLoggedIn(true);\r\n    setUserDetails(user);\r\n    setUserEmail(user.email);\r\n    localStorage.setItem('userEmail', user.email); // Save email to local storage\r\n    localStorage.setItem('userDetails', JSON.stringify(user)); // Save full user details\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/api/logout\",\r\n        {},\r\n        { withCredentials: true } // Send cookies with logout request\r\n      );\r\n      console.log(\"Logout response:\", response.data);\r\n\r\n      // Clear state and local storage\r\n      setIsLoggedIn(false);\r\n      setUserDetails(null);\r\n      setUserEmail('');\r\n      localStorage.removeItem('userEmail');\r\n      localStorage.removeItem('userDetails');\r\n    } catch (error) {\r\n      console.error(\"Error during logout:\", error.response || error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={{ isLoggedIn, userEmail, userDetails, login, logout }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useUser = () => useContext(UserContext);\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}