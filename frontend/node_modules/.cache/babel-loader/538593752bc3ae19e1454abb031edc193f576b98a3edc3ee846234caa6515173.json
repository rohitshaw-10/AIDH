{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asits\\\\OneDrive\\\\Desktop\\\\integrate\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Widget } from 'react-chat-widget';\n// import 'react-chat-widget/lib/styles.css'; // Default styles from the react-chat-widget library\n// import avatar from '../assets/chatbot-avatar.png'; // Ensure this path is correct\n\n// // Internal Component CSS\n// const ChatbotStyles = {\n//   msger: {\n//     display: 'flex',\n//     flexFlow: 'column wrap',\n//     justifyContent: 'space-between',\n//     width: '100%',\n//     maxWidth: '867px',\n//     margin: '25px 10px',\n//     height: 'calc(100% - 50px)',\n//     border: '2px solid #ddd',\n//     borderRadius: '5px',\n//     background: '#fff',\n//     boxShadow: '0 15px 15px -5px rgba(0, 0, 0, 0.2)',\n//   },\n//   msgerHeader: {\n//     fontSize: 'medium',\n//     justifyContent: 'space-between',\n//     padding: '10px',\n//     textAlign: 'center',\n//     borderBottom: '2px solid #ddd',\n//     background: '#eee',\n//     color: '#666',\n//   },\n//   msgerChat: {\n//     flex: 1,\n//     overflowY: 'auto',\n//     padding: '10px',\n//     backgroundColor: '#fcfcfe',\n//   },\n//   msg: {\n//     display: 'flex',\n//     alignItems: 'flex-end',\n//     marginBottom: '10px',\n//   },\n//   msgImg: {\n//     width: '50px',\n//     height: '50px',\n//     marginRight: '10px',\n//     background: '#ddd',\n//     backgroundRepeat: 'no-repeat',\n//     backgroundPosition: 'center',\n//     backgroundSize: 'cover',\n//     borderRadius: '50%',\n//   },\n//   msgBubble: {\n//     maxWidth: '450px',\n//     padding: '15px',\n//     borderRadius: '15px',\n//     background: '#ececec',\n//   },\n//   msgInfo: {\n//     display: 'flex',\n//     justifyContent: 'space-between',\n//     alignItems: 'center',\n//     marginBottom: '10px',\n//   },\n//   msgInfoName: {\n//     marginRight: '10px',\n//     fontWeight: 'bold',\n//   },\n//   msgInfoTime: {\n//     fontSize: '0.85em',\n//   },\n//   rightMsg: {\n//     flexDirection: 'row-reverse',\n//   },\n//   rightMsgBubble: {\n//     background: '#579ffb',\n//     color: '#fff',\n//     borderBottomRightRadius: '0',\n//   },\n//   msgerInputarea: {\n//     display: 'flex',\n//     padding: '10px',\n//     borderTop: '2px solid #ddd',\n//     background: '#eee',\n//   },\n//   msgerInput: {\n//     flex: 1,\n//     background: '#ddd',\n//   },\n//   msgerSendBtn: {\n//     marginLeft: '10px',\n//     background: 'rgb(0, 196, 65)',\n//     color: '#fff',\n//     fontWeight: 'bold',\n//     cursor: 'pointer',\n//     transition: 'background 0.23s',\n//   },\n//   msgerSendBtnHover: {\n//     background: 'rgb(0, 180, 50)',\n//   },\n// };\n\n// const Chatbot = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n//   // Function to handle new user messages\n//   const handleNewUserMessage = (message) => {\n//     console.log(`New message incoming: ${message}`);\n\n//     // Add the user's message to the chat (for internal state)\n//     setMessages((prevMessages) => [\n//       ...prevMessages,\n//       { user: true, text: message },\n//     ]);\n\n//     // Send the message to the Flask backend\n//     axios\n//       .get('http://localhost:5002/get', { params: { msg: message } })\n//       .then((response) => {\n//         const botMessage = response.data;\n//         console.log(botMessage);\n//         setMessages((prevMessages) => [\n//           ...prevMessages,\n//           { user: false, text: botMessage },\n//         ]);\n//       })\n//       .catch((error) => {\n//         console.error('Error getting response from the bot:', error);\n//         setMessages((prevMessages) => [\n//           ...prevMessages,\n//           { user: false, text: 'Sorry, something went wrong.' },\n//         ]);\n//       });\n//   };\n\n//   useEffect(() => {\n//     if (isFirstMessage) {\n//       setMessages([\n//         { user: false, text: 'Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.' },\n//         { user: false, text: 'To start, we need to ask some basic questions. Type \"OK\" to continue.' },\n//       ]);\n//       setIsFirstMessage(false);\n//     }\n//   }, [isFirstMessage]);\n\n//   return (\n//     <div style={ChatbotStyles.msger}>\n//       <header style={ChatbotStyles.msgerHeader}>\n//         <div>ROBO-DOC</div>\n//       </header>\n\n//       <main style={ChatbotStyles.msgerChat}>\n//         {messages.map((msg, index) => (\n//           <div key={index} style={{ ...ChatbotStyles.msg, ...(msg.user ? ChatbotStyles.rightMsg : {}) }}>\n//             <div\n//               style={{ ...ChatbotStyles.msgImg, backgroundImage: `url(${msg.user ? 'https://image.flaticon.com/icons/svg/145/145867.svg' : 'https://image.flaticon.com/icons/svg/327/327779.svg'})` }}\n//             />\n//             <div\n//               style={{\n//                 ...ChatbotStyles.msgBubble,\n//                 ...(msg.user ? ChatbotStyles.rightMsgBubble : {}),\n//               }}\n//             >\n//               <div style={ChatbotStyles.msgInfo}>\n//                 <div style={ChatbotStyles.msgInfoName}>{msg.user ? 'You' : 'Robo-Doc'}</div>\n//                 <div style={ChatbotStyles.msgInfoTime}>{new Date().toLocaleTimeString()}</div>\n//               </div>\n//               <div>{msg.text}</div>\n//             </div>\n//           </div>\n//         ))}\n//       </main>\n\n//       <form\n//         style={ChatbotStyles.msgerInputarea}\n//         onSubmit={(e) => {\n//           e.preventDefault();\n//           const msgText = document.getElementById('textInput').value;\n//           if (msgText) {\n//             handleNewUserMessage(msgText);\n//             document.getElementById('textInput').value = '';\n//           }\n//         }}\n//       >\n//         <input type=\"text\" id=\"textInput\" style={ChatbotStyles.msgerInput} placeholder=\"Enter your message...\" />\n//         <button type=\"submit\" style={ChatbotStyles.msgerSendBtn}>\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Widget } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css'; // Import the default styles from the react-chat-widget library\nimport avatar from '../assets/chatbot-avatar.png'; // Ensure the correct path for the avatar image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n  // Function to handle new user messages\n  const handleNewUserMessage = message => {\n    console.log(`New message incoming: ${message}`);\n\n    // Add the user's message to the chat (for internal state)\n    setMessages(prevMessages => [...prevMessages, {\n      user: true,\n      text: message\n    }]);\n\n    // Send the message to the Flask backend\n    axios.get('http://localhost:5002/get', {\n      params: {\n        msg: message\n      }\n    }).then(response => {\n      const botMessage = response.data;\n      setMessages(prevMessages => [...prevMessages, {\n        user: false,\n        text: botMessage\n      }]);\n    }).catch(error => {\n      console.error('Error getting response from the bot:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        user: false,\n        text: 'Sorry, something went wrong.'\n      }]);\n    });\n  };\n\n  // Render initial bot messages\n  useEffect(() => {\n    if (isFirstMessage) {\n      setMessages([{\n        user: false,\n        text: \"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\"\n      }, {\n        user: false,\n        text: \"To start, we need to ask some basic questions. Type 'OK' to continue.\"\n      }]);\n      setIsFirstMessage(false);\n    }\n  }, [isFirstMessage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(Widget, {\n      handleNewUserMessage: handleNewUserMessage,\n      profileAvatar: avatar // Add custom avatar image for the bot\n      ,\n      title: \"AI Healthcare Assistant\",\n      subtitle: \"How can I help you today?\",\n      messages: messages // Pass custom messages to the widget\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"GHQqd81H+rWdM6JgUGRcT6YXBWE=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","axios","Widget","avatar","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","isFirstMessage","setIsFirstMessage","handleNewUserMessage","message","console","log","prevMessages","user","text","get","params","msg","then","response","botMessage","data","catch","error","className","children","profileAvatar","title","subtitle","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/asits/OneDrive/Desktop/integrate/frontend/src/components/Chatbot.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Widget } from 'react-chat-widget';\n// import 'react-chat-widget/lib/styles.css'; // Default styles from the react-chat-widget library\n// import avatar from '../assets/chatbot-avatar.png'; // Ensure this path is correct\n\n// // Internal Component CSS\n// const ChatbotStyles = {\n//   msger: {\n//     display: 'flex',\n//     flexFlow: 'column wrap',\n//     justifyContent: 'space-between',\n//     width: '100%',\n//     maxWidth: '867px',\n//     margin: '25px 10px',\n//     height: 'calc(100% - 50px)',\n//     border: '2px solid #ddd',\n//     borderRadius: '5px',\n//     background: '#fff',\n//     boxShadow: '0 15px 15px -5px rgba(0, 0, 0, 0.2)',\n//   },\n//   msgerHeader: {\n//     fontSize: 'medium',\n//     justifyContent: 'space-between',\n//     padding: '10px',\n//     textAlign: 'center',\n//     borderBottom: '2px solid #ddd',\n//     background: '#eee',\n//     color: '#666',\n//   },\n//   msgerChat: {\n//     flex: 1,\n//     overflowY: 'auto',\n//     padding: '10px',\n//     backgroundColor: '#fcfcfe',\n//   },\n//   msg: {\n//     display: 'flex',\n//     alignItems: 'flex-end',\n//     marginBottom: '10px',\n//   },\n//   msgImg: {\n//     width: '50px',\n//     height: '50px',\n//     marginRight: '10px',\n//     background: '#ddd',\n//     backgroundRepeat: 'no-repeat',\n//     backgroundPosition: 'center',\n//     backgroundSize: 'cover',\n//     borderRadius: '50%',\n//   },\n//   msgBubble: {\n//     maxWidth: '450px',\n//     padding: '15px',\n//     borderRadius: '15px',\n//     background: '#ececec',\n//   },\n//   msgInfo: {\n//     display: 'flex',\n//     justifyContent: 'space-between',\n//     alignItems: 'center',\n//     marginBottom: '10px',\n//   },\n//   msgInfoName: {\n//     marginRight: '10px',\n//     fontWeight: 'bold',\n//   },\n//   msgInfoTime: {\n//     fontSize: '0.85em',\n//   },\n//   rightMsg: {\n//     flexDirection: 'row-reverse',\n//   },\n//   rightMsgBubble: {\n//     background: '#579ffb',\n//     color: '#fff',\n//     borderBottomRightRadius: '0',\n//   },\n//   msgerInputarea: {\n//     display: 'flex',\n//     padding: '10px',\n//     borderTop: '2px solid #ddd',\n//     background: '#eee',\n//   },\n//   msgerInput: {\n//     flex: 1,\n//     background: '#ddd',\n//   },\n//   msgerSendBtn: {\n//     marginLeft: '10px',\n//     background: 'rgb(0, 196, 65)',\n//     color: '#fff',\n//     fontWeight: 'bold',\n//     cursor: 'pointer',\n//     transition: 'background 0.23s',\n//   },\n//   msgerSendBtnHover: {\n//     background: 'rgb(0, 180, 50)',\n//   },\n// };\n\n// const Chatbot = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n//   // Function to handle new user messages\n//   const handleNewUserMessage = (message) => {\n//     console.log(`New message incoming: ${message}`);\n    \n//     // Add the user's message to the chat (for internal state)\n//     setMessages((prevMessages) => [\n//       ...prevMessages,\n//       { user: true, text: message },\n//     ]);\n\n//     // Send the message to the Flask backend\n//     axios\n//       .get('http://localhost:5002/get', { params: { msg: message } })\n//       .then((response) => {\n//         const botMessage = response.data;\n//         console.log(botMessage);\n//         setMessages((prevMessages) => [\n//           ...prevMessages,\n//           { user: false, text: botMessage },\n//         ]);\n//       })\n//       .catch((error) => {\n//         console.error('Error getting response from the bot:', error);\n//         setMessages((prevMessages) => [\n//           ...prevMessages,\n//           { user: false, text: 'Sorry, something went wrong.' },\n//         ]);\n//       });\n//   };\n\n//   useEffect(() => {\n//     if (isFirstMessage) {\n//       setMessages([\n//         { user: false, text: 'Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.' },\n//         { user: false, text: 'To start, we need to ask some basic questions. Type \"OK\" to continue.' },\n//       ]);\n//       setIsFirstMessage(false);\n//     }\n//   }, [isFirstMessage]);\n\n//   return (\n//     <div style={ChatbotStyles.msger}>\n//       <header style={ChatbotStyles.msgerHeader}>\n//         <div>ROBO-DOC</div>\n//       </header>\n\n//       <main style={ChatbotStyles.msgerChat}>\n//         {messages.map((msg, index) => (\n//           <div key={index} style={{ ...ChatbotStyles.msg, ...(msg.user ? ChatbotStyles.rightMsg : {}) }}>\n//             <div\n//               style={{ ...ChatbotStyles.msgImg, backgroundImage: `url(${msg.user ? 'https://image.flaticon.com/icons/svg/145/145867.svg' : 'https://image.flaticon.com/icons/svg/327/327779.svg'})` }}\n//             />\n//             <div\n//               style={{\n//                 ...ChatbotStyles.msgBubble,\n//                 ...(msg.user ? ChatbotStyles.rightMsgBubble : {}),\n//               }}\n//             >\n//               <div style={ChatbotStyles.msgInfo}>\n//                 <div style={ChatbotStyles.msgInfoName}>{msg.user ? 'You' : 'Robo-Doc'}</div>\n//                 <div style={ChatbotStyles.msgInfoTime}>{new Date().toLocaleTimeString()}</div>\n//               </div>\n//               <div>{msg.text}</div>\n//             </div>\n//           </div>\n//         ))}\n//       </main>\n\n//       <form\n//         style={ChatbotStyles.msgerInputarea}\n//         onSubmit={(e) => {\n//           e.preventDefault();\n//           const msgText = document.getElementById('textInput').value;\n//           if (msgText) {\n//             handleNewUserMessage(msgText);\n//             document.getElementById('textInput').value = '';\n//           }\n//         }}\n//       >\n//         <input type=\"text\" id=\"textInput\" style={ChatbotStyles.msgerInput} placeholder=\"Enter your message...\" />\n//         <button type=\"submit\" style={ChatbotStyles.msgerSendBtn}>\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Widget } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css'; // Import the default styles from the react-chat-widget library\nimport avatar from '../assets/chatbot-avatar.png'; // Ensure the correct path for the avatar image\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n  // Function to handle new user messages\n  const handleNewUserMessage = (message) => {\n    console.log(`New message incoming: ${message}`);\n\n    // Add the user's message to the chat (for internal state)\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { user: true, text: message },\n    ]);\n\n    // Send the message to the Flask backend\n    axios\n      .get('http://localhost:5002/get', { params: { msg: message } })\n      .then((response) => {\n        const botMessage = response.data;\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { user: false, text: botMessage },\n        ]);\n      })\n      .catch((error) => {\n        console.error('Error getting response from the bot:', error);\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { user: false, text: 'Sorry, something went wrong.' },\n        ]);\n      });\n  };\n\n  // Render initial bot messages\n  useEffect(() => {\n    if (isFirstMessage) {\n      setMessages([\n        { user: false, text: \"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\" },\n        { user: false, text: \"To start, we need to ask some basic questions. Type 'OK' to continue.\" },\n      ]);\n      setIsFirstMessage(false);\n    }\n  }, [isFirstMessage]);\n\n  return (\n    <div className=\"chat-container\">\n      {/* Chat Widget */}\n      <Widget\n        handleNewUserMessage={handleNewUserMessage}\n        profileAvatar={avatar}  // Add custom avatar image for the bot\n        title=\"AI Healthcare Assistant\"\n        subtitle=\"How can I help you today?\"\n        messages={messages}  // Pass custom messages to the widget\n      />\n    </div>\n  );\n};\n\nexport default Chatbot;\n\n"],"mappingslD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,OAAO,kCAAkC,CAAC,CAAC;AAC3C,OAAOC,MAAM,MAAM,8BAA8B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAE1D;EACA,MAAMa,oBAAoB,GAAIC,OAAO,IAAK;IACxCC,OAAO,CAACC,GAAG,CAAC,yBAAyBF,OAAO,EAAE,CAAC;;IAE/C;IACAJ,WAAW,CAAEO,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;MAAEC,IAAI,EAAE,IAAI;MAAEC,IAAI,EAAEL;IAAQ,CAAC,CAC9B,CAAC;;IAEF;IACAZ,KAAK,CACFkB,GAAG,CAAC,2BAA2B,EAAE;MAAEC,MAAM,EAAE;QAAEC,GAAG,EAAER;MAAQ;IAAE,CAAC,CAAC,CAC9DS,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAMC,UAAU,GAAGD,QAAQ,CAACE,IAAI;MAChChB,WAAW,CAAEO,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;QAAEC,IAAI,EAAE,KAAK;QAAEC,IAAI,EAAEM;MAAW,CAAC,CAClC,CAAC;IACJ,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAK;MAChBb,OAAO,CAACa,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5DlB,WAAW,CAAEO,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;QAAEC,IAAI,EAAE,KAAK;QAAEC,IAAI,EAAE;MAA+B,CAAC,CACtD,CAAC;IACJ,CAAC,CAAC;EACN,CAAC;;EAED;EACAlB,SAAS,CAAC,MAAM;IACd,IAAIU,cAAc,EAAE;MAClBD,WAAW,CAAC,CACV;QAAEQ,IAAI,EAAE,KAAK;QAAEC,IAAI,EAAE;MAAgF,CAAC,EACtG;QAAED,IAAI,EAAE,KAAK;QAAEC,IAAI,EAAE;MAAwE,CAAC,CAC/F,CAAC;MACFP,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC,EAAE,CAACD,cAAc,CAAC,CAAC;EAEpB,oBACEL,OAAA;IAAKuB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,eAE7BxB,OAAA,CAACH,MAAM;MACLU,oBAAoB,EAAEA,oBAAqB;MAC3CkB,aAAa,EAAE3B,MAAO,CAAE;MAAA;MACxB4B,KAAK,EAAC,yBAAyB;MAC/BC,QAAQ,EAAC,2BAA2B;MACpCxB,QAAQ,EAAEA,QAAS,CAAE;IAAA;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAxDID,OAAO;AAAA+B,EAAA,GAAP/B,OAAO;AA0Db,eAAeA,OAAO;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}