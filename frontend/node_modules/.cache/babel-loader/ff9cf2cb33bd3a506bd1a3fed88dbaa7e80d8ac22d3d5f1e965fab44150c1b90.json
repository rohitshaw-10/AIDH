{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asits\\\\OneDrive\\\\Desktop\\\\integrate\\\\frontend\\\\src\\\\components\\\\Chatbot.js\";\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import avatar from '../assets/chatbot-avatar.png'; // Add the avatar image in your assets folder\n\n// const Chatbot = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [inputText, setInputText] = useState('');\n//   const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n//   // Styles for the component\n//   const styles = {\n//     body: {\n//       display: 'flex',\n//       justifyContent: 'center',\n//       alignItems: 'center',\n//       height: '100vh',\n//       backgroundImage: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',\n//       fontFamily: 'Helvetica, sans-serif',\n//     },\n//     msger: {\n//       display: 'flex',\n//       flexFlow: 'column wrap',\n//       justifyContent: 'space-between',\n//       width: '100%',\n//       maxWidth: '867px',\n//       margin: '25px 10px',\n//       height: 'calc(100% - 50px)',\n//       border: '2px solid #ddd',\n//       borderRadius: '5px',\n//       backgroundColor: '#fff',\n//       boxShadow: '0 15px 15px -5px rgba(0, 0, 0, 0.2)',\n//     },\n//     msgerHeader: {\n//       fontSize: 'medium',\n//       justifyContent: 'space-between',\n//       padding: '10px',\n//       textAlign: 'center',\n//       borderBottom: '2px solid #ddd',\n//       backgroundColor: '#eee',\n//       color: '#666',\n//     },\n//     msgerChat: {\n//       flex: 1,\n//       overflowY: 'auto',\n//       padding: '10px',\n//       backgroundColor: '#fcfcfe',\n//       backgroundImage: 'url(\"test.jpg\")',\n//     },\n//     msgerInputarea: {\n//       display: 'flex',\n//       padding: '10px',\n//       borderTop: '2px solid #ddd',\n//       backgroundColor: '#eee',\n//     },\n//     msgerInput: {\n//       flex: 1,\n//       backgroundColor: '#ddd',\n//       padding: '10px',\n//       border: 'none',\n//       borderRadius: '3px',\n//       fontSize: '1em',\n//     },\n//     msgerSendBtn: {\n//       marginLeft: '10px',\n//       backgroundColor: 'rgb(0, 196, 65)',\n//       color: '#fff',\n//       fontWeight: 'bold',\n//       cursor: 'pointer',\n//       transition: 'background 0.23s',\n//     },\n//     msgerSendBtnHover: {\n//       backgroundColor: 'rgb(0, 180, 50)',\n//     },\n//     msg: {\n//       display: 'flex',\n//       alignItems: 'flex-end',\n//       marginBottom: '10px',\n//     },\n//     msgImg: {\n//       width: '50px',\n//       height: '50px',\n//       marginRight: '10px',\n//       background: '#ddd',\n//       backgroundRepeat: 'no-repeat',\n//       backgroundPosition: 'center',\n//       backgroundSize: 'cover',\n//       borderRadius: '50%',\n//     },\n//     msgBubble: {\n//       maxWidth: '450px',\n//       padding: '15px',\n//       borderRadius: '15px',\n//       backgroundColor: '#ececec', // Default for left messages\n//     },\n//     rightMsg: {\n//       flexDirection: 'row-reverse',\n//     },\n//     rightMsgBubble: {\n//       backgroundColor: '#579ffb',\n//       color: '#fff',\n//       borderBottomRightRadius: '0',\n//     },\n//     leftMsgBubble: {\n//       borderBottomLeftRadius: '0',\n//     },\n//   };\n\n//   // Function to handle new user messages\n//   const handleNewUserMessage = (message) => {\n//     console.log(`New message incoming: ${message}`);\n\n//     // Add the user's message to the chat\n//     setMessages((prevMessages) => [\n//       ...prevMessages,\n//       { user: true, text: message },\n//     ]);\n\n//     // Send the message to the Flask backend\n//     axios\n//       .get('http://localhost:5002/get', { params: { msg: message } })\n//       .then((response) => {\n//         const botMessage = response.data;\n//         setMessages((prevMessages) => [\n//           ...prevMessages,\n//           { user: false, text: botMessage },\n//         ]);\n//       })\n//       .catch((error) => {\n//         console.error('Error getting response from the bot:', error);\n//         setMessages((prevMessages) => [\n//           ...prevMessages,\n//           { user: false, text: \"Sorry, something went wrong.\" },\n//         ]);\n//       });\n//   };\n\n//   // Handle form submission\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n//     if (inputText.trim() !== '') {\n//       handleNewUserMessage(inputText);\n//       setInputText('');\n//     }\n//   };\n\n//   // Function to render the messages\n//   const renderMessages = () => {\n//     return messages.map((msg, index) => (\n//       <div\n//         className=\"msg\"\n//         key={index}\n//         style={{ ...styles.msg, ...(msg.user ? styles.rightMsg : {}) }}\n//       >\n//         <div\n//           className=\"msg-img\"\n//           style={{\n//             ...styles.msgImg,\n//             backgroundImage: `url(${avatar})`,\n//           }}\n//         ></div>\n//         <div\n//           className=\"msg-bubble\"\n//           style={{\n//             ...styles.msgBubble,\n//             ...(msg.user ? styles.rightMsgBubble : styles.leftMsgBubble),\n//           }}\n//         >\n//           <div className=\"msg-info\">\n//             <div className=\"msg-info-name\">{msg.user ? 'You' : 'Robo-Doc'}</div>\n//           </div>\n//           <div className=\"msg-text\">{msg.text}</div>\n//         </div>\n//       </div>\n//     ));\n//   };\n\n//   // Render initial bot messages\n//   useEffect(() => {\n//     if (isFirstMessage) {\n//       setMessages([\n//         { user: false, text: \"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\" },\n//         { user: false, text: \"To start, we need to ask some basic questions. Type 'OK' to continue.\" },\n//       ]);\n//       setIsFirstMessage(false);\n//     }\n//   }, [isFirstMessage]);\n\n//   return (\n//     <div className=\"chatbot-container\" style={styles.body}>\n//       <section className=\"msger\" style={styles.msger}>\n//         <header className=\"msger-header\" style={styles.msgerHeader}>\n//           <div className=\"msger-header-title\">Robo-Doc</div>\n//         </header>\n\n//         <main className=\"msger-chat\" style={styles.msgerChat}>\n//           {renderMessages()}\n//         </main>\n\n//         <form className=\"msger-inputarea\" onSubmit={handleSubmit} style={styles.msgerInputarea}>\n//           <input\n//             type=\"text\"\n//             className=\"msger-input\"\n//             value={inputText}\n//             onChange={(e) => setInputText(e.target.value)}\n//             placeholder=\"Enter your message...\"\n//             style={styles.msgerInput}\n//           />\n//           <button\n//             type=\"submit\"\n//             className=\"msger-send-btn\"\n//             style={styles.msgerSendBtn}\n//             onMouseOver={(e) => (e.target.style.backgroundColor = styles.msgerSendBtnHover.backgroundColor)}\n//             onMouseOut={(e) => (e.target.style.backgroundColor = styles.msgerSendBtn.backgroundColor)}\n//           >\n//             Send\n//           </button>\n//         </form>\n//       </section>\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\n\nimport React from 'react';\nimport { Widget } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport avatar from '../assets/chatbot-avatar.png'; // Make sure you have a chatbot avatar image in the assets folder\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  // Function to handle new user messages\n  const handleNewUserMessage = message => {\n    console.log(`New message incoming: ${message}`);\n\n    // Simulate sending the message to an API or backend and getting a response\n    // This can be replaced by an actual backend call\n    const botMessage = `You said: \"${message}\". How can I assist you further?`;\n\n    // Simulate the bot responding\n    setTimeout(() => {\n      // This is where you send the response back to the chat widget\n      window.dispatchEvent(new CustomEvent('react-chat-widget-send', {\n        detail: {\n          text: botMessage,\n          from: 'bot'\n        }\n      }));\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(Widget, {\n    handleNewUserMessage: handleNewUserMessage,\n    profileAvatar: avatar // Avatar image for the chatbot\n    ,\n    title: \"AI Healthcare Assistant\",\n    subtitle: \"How can I help you today?\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n};\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","Widget","avatar","jsxDEV","_jsxDEV","Chatbot","handleNewUserMessage","message","console","log","botMessage","setTimeout","window","dispatchEvent","CustomEvent","detail","text","from","profileAvatar","title","subtitle","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/asits/OneDrive/Desktop/integrate/frontend/src/components/Chatbot.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import avatar from '../assets/chatbot-avatar.png'; // Add the avatar image in your assets folder\n\n// const Chatbot = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [inputText, setInputText] = useState('');\n//   const [isFirstMessage, setIsFirstMessage] = useState(true);\n\n//   // Styles for the component\n//   const styles = {\n//     body: {\n//       display: 'flex',\n//       justifyContent: 'center',\n//       alignItems: 'center',\n//       height: '100vh',\n//       backgroundImage: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',\n//       fontFamily: 'Helvetica, sans-serif',\n//     },\n//     msger: {\n//       display: 'flex',\n//       flexFlow: 'column wrap',\n//       justifyContent: 'space-between',\n//       width: '100%',\n//       maxWidth: '867px',\n//       margin: '25px 10px',\n//       height: 'calc(100% - 50px)',\n//       border: '2px solid #ddd',\n//       borderRadius: '5px',\n//       backgroundColor: '#fff',\n//       boxShadow: '0 15px 15px -5px rgba(0, 0, 0, 0.2)',\n//     },\n//     msgerHeader: {\n//       fontSize: 'medium',\n//       justifyContent: 'space-between',\n//       padding: '10px',\n//       textAlign: 'center',\n//       borderBottom: '2px solid #ddd',\n//       backgroundColor: '#eee',\n//       color: '#666',\n//     },\n//     msgerChat: {\n//       flex: 1,\n//       overflowY: 'auto',\n//       padding: '10px',\n//       backgroundColor: '#fcfcfe',\n//       backgroundImage: 'url(\"test.jpg\")',\n//     },\n//     msgerInputarea: {\n//       display: 'flex',\n//       padding: '10px',\n//       borderTop: '2px solid #ddd',\n//       backgroundColor: '#eee',\n//     },\n//     msgerInput: {\n//       flex: 1,\n//       backgroundColor: '#ddd',\n//       padding: '10px',\n//       border: 'none',\n//       borderRadius: '3px',\n//       fontSize: '1em',\n//     },\n//     msgerSendBtn: {\n//       marginLeft: '10px',\n//       backgroundColor: 'rgb(0, 196, 65)',\n//       color: '#fff',\n//       fontWeight: 'bold',\n//       cursor: 'pointer',\n//       transition: 'background 0.23s',\n//     },\n//     msgerSendBtnHover: {\n//       backgroundColor: 'rgb(0, 180, 50)',\n//     },\n//     msg: {\n//       display: 'flex',\n//       alignItems: 'flex-end',\n//       marginBottom: '10px',\n//     },\n//     msgImg: {\n//       width: '50px',\n//       height: '50px',\n//       marginRight: '10px',\n//       background: '#ddd',\n//       backgroundRepeat: 'no-repeat',\n//       backgroundPosition: 'center',\n//       backgroundSize: 'cover',\n//       borderRadius: '50%',\n//     },\n//     msgBubble: {\n//       maxWidth: '450px',\n//       padding: '15px',\n//       borderRadius: '15px',\n//       backgroundColor: '#ececec', // Default for left messages\n//     },\n//     rightMsg: {\n//       flexDirection: 'row-reverse',\n//     },\n//     rightMsgBubble: {\n//       backgroundColor: '#579ffb',\n//       color: '#fff',\n//       borderBottomRightRadius: '0',\n//     },\n//     leftMsgBubble: {\n//       borderBottomLeftRadius: '0',\n//     },\n//   };\n\n//   // Function to handle new user messages\n//   const handleNewUserMessage = (message) => {\n//     console.log(`New message incoming: ${message}`);\n    \n//     // Add the user's message to the chat\n//     setMessages((prevMessages) => [\n//       ...prevMessages,\n//       { user: true, text: message },\n//     ]);\n\n//     // Send the message to the Flask backend\n//     axios\n//       .get('http://localhost:5002/get', { params: { msg: message } })\n//       .then((response) => {\n//         const botMessage = response.data;\n//         setMessages((prevMessages) => [\n//           ...prevMessages,\n//           { user: false, text: botMessage },\n//         ]);\n//       })\n//       .catch((error) => {\n//         console.error('Error getting response from the bot:', error);\n//         setMessages((prevMessages) => [\n//           ...prevMessages,\n//           { user: false, text: \"Sorry, something went wrong.\" },\n//         ]);\n//       });\n//   };\n\n//   // Handle form submission\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n//     if (inputText.trim() !== '') {\n//       handleNewUserMessage(inputText);\n//       setInputText('');\n//     }\n//   };\n\n//   // Function to render the messages\n//   const renderMessages = () => {\n//     return messages.map((msg, index) => (\n//       <div\n//         className=\"msg\"\n//         key={index}\n//         style={{ ...styles.msg, ...(msg.user ? styles.rightMsg : {}) }}\n//       >\n//         <div\n//           className=\"msg-img\"\n//           style={{\n//             ...styles.msgImg,\n//             backgroundImage: `url(${avatar})`,\n//           }}\n//         ></div>\n//         <div\n//           className=\"msg-bubble\"\n//           style={{\n//             ...styles.msgBubble,\n//             ...(msg.user ? styles.rightMsgBubble : styles.leftMsgBubble),\n//           }}\n//         >\n//           <div className=\"msg-info\">\n//             <div className=\"msg-info-name\">{msg.user ? 'You' : 'Robo-Doc'}</div>\n//           </div>\n//           <div className=\"msg-text\">{msg.text}</div>\n//         </div>\n//       </div>\n//     ));\n//   };\n\n//   // Render initial bot messages\n//   useEffect(() => {\n//     if (isFirstMessage) {\n//       setMessages([\n//         { user: false, text: \"Hello, my name is RoboDoc, and I will be happy to help diagnose your disease.\" },\n//         { user: false, text: \"To start, we need to ask some basic questions. Type 'OK' to continue.\" },\n//       ]);\n//       setIsFirstMessage(false);\n//     }\n//   }, [isFirstMessage]);\n\n//   return (\n//     <div className=\"chatbot-container\" style={styles.body}>\n//       <section className=\"msger\" style={styles.msger}>\n//         <header className=\"msger-header\" style={styles.msgerHeader}>\n//           <div className=\"msger-header-title\">Robo-Doc</div>\n//         </header>\n\n//         <main className=\"msger-chat\" style={styles.msgerChat}>\n//           {renderMessages()}\n//         </main>\n\n//         <form className=\"msger-inputarea\" onSubmit={handleSubmit} style={styles.msgerInputarea}>\n//           <input\n//             type=\"text\"\n//             className=\"msger-input\"\n//             value={inputText}\n//             onChange={(e) => setInputText(e.target.value)}\n//             placeholder=\"Enter your message...\"\n//             style={styles.msgerInput}\n//           />\n//           <button\n//             type=\"submit\"\n//             className=\"msger-send-btn\"\n//             style={styles.msgerSendBtn}\n//             onMouseOver={(e) => (e.target.style.backgroundColor = styles.msgerSendBtnHover.backgroundColor)}\n//             onMouseOut={(e) => (e.target.style.backgroundColor = styles.msgerSendBtn.backgroundColor)}\n//           >\n//             Send\n//           </button>\n//         </form>\n//       </section>\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\n\n\nimport React from 'react';\nimport { Widget } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport avatar from '../assets/chatbot-avatar.png'; // Make sure you have a chatbot avatar image in the assets folder\n\nconst Chatbot = () => {\n  // Function to handle new user messages\n  const handleNewUserMessage = (message) => {\n    console.log(`New message incoming: ${message}`);\n    \n    // Simulate sending the message to an API or backend and getting a response\n    // This can be replaced by an actual backend call\n    const botMessage = `You said: \"${message}\". How can I assist you further?`;\n\n    // Simulate the bot responding\n    setTimeout(() => {\n      // This is where you send the response back to the chat widget\n      window.dispatchEvent(\n        new CustomEvent('react-chat-widget-send', {\n          detail: {\n            text: botMessage,\n            from: 'bot',\n          },\n        })\n      );\n    }, 1000);\n  };\n\n  return (\n    <Widget\n      handleNewUserMessage={handleNewUserMessage}\n      profileAvatar={avatar} // Avatar image for the chatbot\n      title=\"AI Healthcare Assistant\"\n      subtitle=\"How can I help you today?\"\n    />\n  );\n};\n\nexport default Chatbot;\n"],"mappingszB,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,OAAO,kCAAkC;AACzC,OAAOC,MAAM,MAAM,8BAA8B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EACpB;EACA,MAAMC,oBAAoB,GAAIC,OAAO,IAAK;IACxCC,OAAO,CAACC,GAAG,CAAC,yBAAyBF,OAAO,EAAE,CAAC;;IAE/C;IACA;IACA,MAAMG,UAAU,GAAG,cAAcH,OAAO,kCAAkC;;IAE1E;IACAI,UAAU,CAAC,MAAM;MACf;MACAC,MAAM,CAACC,aAAa,CAClB,IAAIC,WAAW,CAAC,wBAAwB,EAAE;QACxCC,MAAM,EAAE;UACNC,IAAI,EAAEN,UAAU;UAChBO,IAAI,EAAE;QACR;MACF,CAAC,CACH,CAAC;IACH,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,oBACEb,OAAA,CAACH,MAAM;IACLK,oBAAoB,EAAEA,oBAAqB;IAC3CY,aAAa,EAAEhB,MAAO,CAAC;IAAA;IACvBiB,KAAK,EAAC,yBAAyB;IAC/BC,QAAQ,EAAC;EAA2B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEN,CAAC;AAACC,EAAA,GA/BIpB,OAAO;AAiCb,eAAeA,OAAO;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}